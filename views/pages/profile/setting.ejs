<%- include("../../partials/profileFeaturedBlog.ejs")%>
<div class="p-4 rounded-lg  m-auto font-lora mt-6">

  <h1 class="text-base font-lora sm:text-lg md:text-xl lg:text-2xl p-3 px-2 md:px-2 lg:px-5 font-semibold flex justify-between items-center <%= user.settings.theme === 'dark' ? 'text-dark-secondary bg-dark-background' : 'text-secondary bg-white bg-background' %> sticky top-0 z-10" >User Settings</h1>
  <table
    class="w-full <%= user.settings.theme === 'dark' ? 'bg-dark-sixth text-dark-secondary' : 'bg-background text-primary' %> shadow-md rounded-lg"
  >
    <tbody>

      <tr class="border-b <%= user.settings.theme === 'dark' ? 'border-dark-background' : 'border-background' %>">
        <td class="p-4 flex items-center gap-2 md:gap-1 lg:gap-2"><img src="/images/icons/blockedUserIcon.png" alt="blocked user icon" class="h-6 w-6 object-cover <%= user.settings.theme === 'dark' ? 'invert' : '' %>"/> Blocked Users</td>
        <td class="p-4 text-right">
          <a
            href="/blockedUsers"
            class="text-blue-500 hover:text-highlight font-roboto whitespace-nowrap"
            >Blocked Users</a
          >
        </td>
      </tr>
      
      <tr class="border-b <%= user.settings.theme === 'dark' ? 'border-dark-background' : 'border-background' %>">
        <td class="p-4 flex items-center gap-2 md:gap-1 lg:gap-2 "><img src="/images/icons/suggestionIcon.png" alt="blocked user icon" class="h-6 w-6 object-cover <%= user.settings.theme === 'dark' ? 'invert' : '' %>"/> Auto Suggestion</td>
        <td class="p-4 text-right">
          <label class="relative inline-flex items-center cursor-pointer">
            <input type="checkbox" class="sr-only peer" <%= setting.suggestions
            ? 'checked' : '' %> onclick="toggleSuggestion()" />
            <div
              class="w-11 h-6 bg-fourth rounded-full peer peer-checked:bg-blue-600"
            ></div>
            <div
              class="w-5 h-5 bg-white rounded-full absolute left-0.5 top-0.5 peer-checked:left-6 transition-all"
            ></div>
          </label>
        </td>
      </tr>
     
      <tr class="border-b <%= user.settings.theme === 'dark' ? 'border-dark-background' : 'border-background' %>">
        <td class="p-4 flex items-center gap-2 md:gap-1 lg:gap-2"><img src="/images/icons/nightModeIcon.png" alt="blocked user icon" class="h-6 w-6 object-cover <%= user.settings.theme === 'dark' ? 'invert' : '' %>"/> Night Mode</td>
        <td class="p-4 text-right">
          <label class="relative inline-flex items-center cursor-pointer">
            <input type="checkbox" class="sr-only peer" id="theme-toggle" <%=
            setting.theme == 'light' ? '' : 'checked' %>
            onclick="toggleNightMode()" />
            <div
              class="w-11 h-6 bg-fourth rounded-full peer peer-checked:bg-blue-600"
            ></div>
            <div
              class="w-5 h-5 bg-white rounded-full absolute left-0.5 top-0.5 peer-checked:left-6 transition-all"
            ></div>
          </label>
        </td>
      </tr>

      <tr class="border-b <%= user.settings.theme === 'dark' ? 'border-dark-background' : 'border-background' %>">
        <td class="p-4 flex items-center gap-2 md:gap-1 lg:gap-2"><img src="/images/icons/emailIcon copy.png" alt="blocked user icon" class="h-6 w-6 object-cover <%= user.settings.theme === 'dark' ? 'invert' : '' %>"/> Email Notifications</td>
        <td class="p-4 text-right">
          <label class="relative inline-flex items-center cursor-pointer">
            <input type="checkbox" class="sr-only peer" <%=
            setting.notifications ? 'checked' : '' %>
            onclick="toggleNotification()"/>
            <div
              class="w-11 h-6 bg-fourth rounded-full peer peer-checked:bg-blue-600"
            ></div>
            <div
              class="w-5 h-5 bg-white rounded-full absolute left-0.5 top-0.5 peer-checked:left-6 transition-all"
            ></div>
          </label>
        </td>
      </tr>

      <tr class="border-b <%= user.settings.theme === 'dark' ? 'border-dark-background' : 'border-background' %>">
        <td class="p-4 flex items-center gap-2 md:gap-1 lg:gap-2"><img src="/images/icons/newsletterIcon.png" alt="blocked user icon" class="h-6 w-6 object-cover <%= user.settings.theme === 'dark' ? 'invert' : '' %>"/> Receive Newsletters</td>
        <td class="p-4 text-right">
          <label class="relative inline-flex items-center cursor-pointer">
            <input type="checkbox" class="sr-only peer" <%= setting.newsletter ?
            'checked' : '' %> onclick="toggleNewsletter()"/>
            <div
              class="w-11 h-6 bg-fourth rounded-full peer peer-checked:bg-blue-600"
            ></div>
            <div
              class="w-5 h-5 bg-white rounded-full absolute left-0.5 top-0.5 peer-checked:left-6 transition-all"
            ></div>
          </label>
        </td>
      </tr>

      <tr class="border-b <%= user.settings.theme === 'dark' ? 'border-dark-background' : 'border-background' %>">
        <td class="p-4 flex items-center gap-2 md:gap-1 lg:gap-2"><img src="/images/icons/2faIcon.png" alt="blocked user icon" class="h-6 w-6 object-cover <%= user.settings.theme === 'dark' ? 'invert' : '' %>"/> Two-Factor Authentication</td>
        <td class="p-4 text-right">
          <label class="relative inline-flex items-center cursor-pointer">
            <input type="checkbox" class="sr-only peer" <%= setting['2fa'] ?
            'checked' : '' %> onclick="toggle2fa()" />
            <div
              class="w-11 h-6 bg-fourth rounded-full peer peer-checked:bg-blue-600"
            ></div>
            <div
              class="w-5 h-5 bg-white rounded-full absolute left-0.5 top-0.5 peer-checked:left-6 transition-all"
            ></div>
          </label>
        </td>
      </tr>

      <tr class="border-b <%= user.settings.theme === 'dark' ? 'border-dark-background' : 'border-background' %>">
        <td class="p-4 flex items-center gap-2 md:gap-1 lg:gap-2"><img src="/images/icons/passwordResetIcon.png" alt="blocked user icon" class="h-6 w-6 object-cover <%= user.settings.theme === 'dark' ? 'invert' : '' %>"/> Password Reset</td>
        <td class="p-4 text-right">
          <a href="/profile/verify"
            class="bg-blue-500 hover:bg-blue-600 text-sixth  py-1 px-4 rounded-lg font-roboto"
          >
            Reset
        </a>
        </td>
      </tr>

      <tr>
        <td class="p-4 flex items-center gap-2 md:gap-1 lg:gap-2"><img src="/images/icons/deleteUserIcon.png" alt="blocked user icon" class="h-6 w-6 object-cover <%= user.settings.theme === 'dark' ? 'invert' : '' %>"/> Delete User</td>
        <td class="p-4 text-right">
          <button
            class="bg-red-500 hover:bg-red-600 text-sixth py-1 font-roboto px-4 rounded-lg"
            onclick="toggleDeleteUser()"
          >
            Delete
          </button>
        </td>
      </tr>
    </tbody>
  </table>
</div>
<!-- dlete user popout modal -->
<div
  class="hidden fixed inset-0  flex items-center justify-center backdrop-blur-sm <%= user.settings.theme === 'dark' ? 'bg-dark-primary text-dark-text' : ' text-text bg-primary' %> bg-opacity-50 p-5 md:p-0 z-50"
  onclick="toggleDeleteUser()"
  id="deleteUser"
>
  <div  class="<%= user.settings.theme === 'dark' ? 'bg-dark-background text-dark-text' : 'bg-white text-gray-900' %> w-full sm:max-w-md lg:max-w-lg p-6 rounded-xl shadow-2xl transition-all duration-300" 
    onclick="event.stopPropagation()">
     <div class="flex items-center justify-between mb-4">
      <h2 class="text-xl font-semibold font-sans">Delete User</h2>
      <button
        onclick="toggleDeleteUser()"
        class="text-gray-400 hover:text-red-500 transition duration-200 text-xl"
        aria-label="Close"
      >
        &times;
      </button>
    </div>

    <p cclass="text-sm mb-6 <%= user.settings.theme === 'dark' ? 'text-gray-400' : 'text-gray-600' %>">
      Are you sure you want to delete your account? This action cannot be
      undone.
    </p>

    <div class="flex justify-end gap-4">
      <button
        class="px-4 py-2 rounded-md border border-gray-300 text-sm font-medium <%= user.settings.theme === 'dark' ? 'text-gray-300 hover:bg-dark-primary' : 'text-gray-700 hover:bg-gray-100' %> transition duration-200"
        onclick="toggleDeleteUser()"
      >
        Cancel
      </button>

      <button
        class="btn-with-loader relative px-4 py-2 rounded-md bg-red-600 hover:bg-red-700 text-white text-sm font-medium shadow-md transition duration-200 min-w-[140px] h-[42px]"
        onclick="deleteUser()"
        id="deleteUserButton"
      >
       <div
          class="loader-inner ball-beat hidden absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2"
        >
          <div
            class="w-2 h-2 sm:w-2.5 sm:h-2.5 md:w-3 md:h-3 bg-white rounded-full"
          ></div>
          <div
            class="w-2 h-2 sm:w-2.5 sm:h-2.5 md:w-3 md:h-3 bg-white rounded-full mx-1"
          ></div>
          <div
            class="w-2 h-2 sm:w-2.5 sm:h-2.5 md:w-3 md:h-3 bg-white rounded-full"
          ></div>
        </div>
        <span class="btn-text inline-block">Delete user</span>
       
      </button>
      
    </div>
  </div>
</div>

<script>
  function toggleNightMode() {
    fetch("/api/profile/mode", {
      method: "PATCH",
    })
      .then((response) => {
        if (response.ok) {
          Toastify({
                  text: "Night mode updated successfully.",
                  className: "info",
                  duration: 4000,
                  gravity: "top",
                  position: "right",
                  backgroundColor: "linear-gradient(to right, #0f2027, #203a43, #2c5364)", 
                  stopOnFocus: true,
                  close: true,
                  style: {
                    borderRadius: "10px",
                    boxShadow: "0 4px 12px rgba(0, 0, 0, 0.1)",
                    fontSize: "15px",
                    padding: "14px 18px",
                    fontFamily: "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif",
                    color: "#fff"
                  }
            }).showToast();
          window.location.reload();
        } else {
          
           Toastify({
                text: "Failed to update night mode.",
                duration: 4000,
                gravity: "top",
                position: "right",
                backgroundColor: "linear-gradient(to right, #e52d27, #b31217)",
                stopOnFocus: true,
                close: true,
                style: {
                  borderRadius: "10px",
                  boxShadow: "0 4px 12px rgba(0, 0, 0, 0.1)",
                  fontSize: "15px",
                  padding: "14px 18px",
                  fontFamily: "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif",
                  color: "#fff"
                }
              }).showToast();
        }
      })
      .catch((error) => {
        Toastify({
                text: "Failed to update mode. Please try again later.",
                duration: 4000,
                gravity: "top",
                position: "right",
                backgroundColor: "linear-gradient(to right, #e52d27, #b31217)",
                stopOnFocus: true,
                close: true,
                style: {
                  borderRadius: "10px",
                  boxShadow: "0 4px 12px rgba(0, 0, 0, 0.1)",
                  fontSize: "15px",
                  padding: "14px 18px",
                  fontFamily: "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif",
                  color: "#fff"
                }
              }).showToast();
      });
  }

  function toggleSuggestion() {
    fetch("/api/profile/suggestions", {
      method: "PATCH",
    })
      .then((response) => {
        if (response.ok) {
          console.log("Suggestions updated successfully.", response);
          Toastify({
                text: "Suggestions updated successfully.",
                duration: 4000,
                gravity: "top",
                position: "right",
                backgroundColor: "linear-gradient(to right, #0f2027, #203a43, #2c5364)",
                stopOnFocus: true,
                close: true,
                style: {
                  borderRadius: "10px",
                  boxShadow: "0 4px 12px rgba(0, 0, 0, 0.1)",
                  fontSize: "15px",
                  padding: "14px 18px",
                  fontFamily: "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif",
                  color: "#fff"
                }
              }).showToast();
        } else {
          Toastify({
                text: "Failed to update suggestions.",
                duration: 4000,
                gravity: "top",
                position: "right",
                backgroundColor: "linear-gradient(to right, #e52d27, #b31217)",
                stopOnFocus: true,
                close: true,
                style: {
                  borderRadius: "10px",
                  boxShadow: "0 4px 12px rgba(0, 0, 0, 0.1)",
                  fontSize: "15px",
                  padding: "14px 18px",
                  fontFamily: "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif",
                  color: "#fff"
                }
              }).showToast();
          return;
        }
      })
      .catch((error) => {
        Toastify({
                text: "Failed to update suggestions. Please try again later.",
                duration: 4000,
                gravity: "top",
                position: "right",
                backgroundColor: "linear-gradient(to right, #e52d27, #b31217)",
                stopOnFocus: true,
                close: true,
                style: {
                  borderRadius: "10px",
                  boxShadow: "0 4px 12px rgba(0, 0, 0, 0.1)",
                  fontSize: "15px",
                  padding: "14px 18px",
                  fontFamily: "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif",
                  color: "#fff"
                }
              }).showToast();
      });
  }

  function toggleNotification() {
    fetch("/api/profile/notification", {
      method: "PATCH",
    })
      .then((response) => {
        if (response.ok) {
          console.log("Notifications updated successfully.", response);
          Toastify({
                text: "Notifications updated successfully.",
                duration: 4000,
                gravity: "top",
                position: "right",
                backgroundColor: "linear-gradient(to right, #0f2027, #203a43, #2c5364)",
                stopOnFocus: true,
                close: true,
                style: {
                  borderRadius: "10px",
                  boxShadow: "0 4px 12px rgba(0, 0, 0, 0.1)",
                  fontSize: "15px",
                  padding: "14px 18px",
                  fontFamily: "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif",
                  color: "#fff"
                }
              }).showToast();
        } else {
          throw new Error("Failed to Notificatios mode.");
        }
      })
      .catch((error) => {
           Toastify({
                text: "Failed to update notifications. Please try again later.",
                duration: 4000,
                gravity: "top",
                position: "right",
                backgroundColor: "linear-gradient(to right, #e52d27, #b31217)",
                stopOnFocus: true,
                close: true,
                style: {
                  borderRadius: "10px",
                  boxShadow: "0 4px 12px rgba(0, 0, 0, 0.1)",
                  fontSize: "15px",
                  padding: "14px 18px",
                  fontFamily: "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif",
                  color: "#fff"
                }
              }).showToast();
      });
  }

  function toggleNewsletter() {
    fetch("/api/profile/newsletter", {
      method: "PATCH",
    })
      .then((response) => {
        if (response.ok) {
          Toastify({
                text: "Newsletter updated successfully.",
                duration: 4000,
                gravity: "top",
                position: "right",
                backgroundColor: "linear-gradient(to right, #0f2027, #203a43, #2c5364)",
                stopOnFocus: true,
                close: true,
                style: {
                  borderRadius: "10px",
                  boxShadow: "0 4px 12px rgba(0, 0, 0, 0.1)",
                  fontSize: "15px",
                  padding: "14px 18px",
                  fontFamily: "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif",
                  color: "#fff"
                }
              }).showToast();
        } else {
          throw new Error("Failed to update newsletter.");
        }
      })
      .catch((error) => {
       Toastify({
                text: "Failed to update newsletter. Please try again later.",
                duration: 4000,
                gravity: "top",
                position: "right",
                backgroundColor: "linear-gradient(to right, #e52d27, #b31217)",
                stopOnFocus: true,
                close: true,
                style: {
                  borderRadius: "10px",
                  boxShadow: "0 4px 12px rgba(0, 0, 0, 0.1)",
                  fontSize: "15px",
                  padding: "14px 18px",
                  fontFamily: "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif",
                  color: "#fff"
                }
              }).showToast();
      });
  }

  function toggle2fa() {
    fetch("/api/profile/2fa", {
      method: "PATCH",
    })
      .then((response) => {
        if (response.ok) {
           Toastify({
                text: "Two Factor Authentication updated successfully.",
                duration: 4000,
                gravity: "top",
                position: "right",
                backgroundColor: "linear-gradient(to right, #0f2027, #203a43, #2c5364)",
                stopOnFocus: true,
                close: true,
                style: {
                  borderRadius: "10px",
                  boxShadow: "0 4px 12px rgba(0, 0, 0, 0.1)",
                  fontSize: "15px",
                  padding: "14px 18px",
                  fontFamily: "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif",
                  color: "#fff"
                }
              }).showToast();
        } else {
          throw new Error("Failed to update 2fa.");
        }
      })
      .catch((error) => {
         Toastify({
                text: "Failed to update Two Factor Authentication. Please try again later.",
                duration: 4000,
                gravity: "top",
                position: "right",
                backgroundColor: "linear-gradient(to right, #e52d27, #b31217)",
                stopOnFocus: true,
                close: true,
                style: {
                  borderRadius: "10px",
                  boxShadow: "0 4px 12px rgba(0, 0, 0, 0.1)",
                  fontSize: "15px",
                  padding: "14px 18px",
                  fontFamily: "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif",
                  color: "#fff"
                }
              }).showToast();
      });
  }
  const deleteUserButton = document.getElementById("deleteUserButton");

  async function deleteUser() {
    
    showBtnLoader(deleteUserButton);
    try {
      const response = await fetch("/api/profile/delete", {
        method: "DELETE",
      });

      if (response.ok) {
        window.location.href = "/signin";
      } else {
        throw new Error("Failed to delete user.");
      }
    } catch (error) {
      hideBtnLoader(deleteUserButton);
      Toastify({
                text: "Failed to delete user. Please try again later.",
                duration: 4000,
                gravity: "top",
                position: "right",
                backgroundColor: "linear-gradient(to right, #e52d27, #b31217)",
                stopOnFocus: true,
                close: true,
                style: {
                  borderRadius: "10px",
                  boxShadow: "0 4px 12px rgba(0, 0, 0, 0.1)",
                  fontSize: "15px",
                  padding: "14px 18px",
                  fontFamily: "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif",
                  color: "#fff"
                }
              }).showToast();
    }
  }

  function toggleDeleteUser() {
    const modal = document.getElementById("deleteUser");
    if (modal.style.display === "none" || modal.style.display === "") {
      modal.style.display = "flex";
    } else {
      modal.style.display = "none";
    }
  }
</script>
