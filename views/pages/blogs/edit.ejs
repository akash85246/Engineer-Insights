<form
  class="grid grid-cols-4 md:grid-cols-5 gap-3 md:gap-2 lg:gap-4 px-2 md:px-1 py-14 lg:py-16 font-lora"
  action="/blog/save/<%= blog.slug %>?_method=PUT"
  method="POST"
>
  <div
    class="order-3 md:order-1 col-span-4 md:col-span-1 p-3 md:p-2 lg:p-3 <%= user.settings.theme === 'dark' ? 'bg-dark-sixth text-dark-secondary' : ' bg-white text-secondary' %> shadow-lg rounded-lg"
  >
    <h2
      class="text-sm sm:text-base md:text-lg lg:text-xl font-bold mb-2 lg:mb-6 <%= user.settings.theme === 'dark' ? 'text-dark-primary bg-dark-sixth' : 'text-secondary bg-white' %> sticky top-0 pb-1 lg:pb-2"
    >
      Post Settings
    </h2>

    <div class="mb-6">
      <label
        for="category"
        class="block text-xs sm:text-sm md:text-base font-medium <%= user.settings.theme === 'dark' ? 'text-dark-text' : 'text-secondary' %> mb-2"
        >Category</label
      >
      <select
        id="category"
        name="category"
        class="block w-full px-4 py-2 text-xs sm:text-sm md:text-base border <%= user.settings.theme === 'dark' ? 'bg-dark-sixth text-dark-secondary' : ' bg-background text-primary' %> border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-fourth focus:border-fourth"
      >
        <option value="" disabled selected>Select a category</option>
        <option value="tech">Technology</option>
        <option value="health">Health</option>
        <option value="travel">Travel</option>
        <option value="lifestyle">Lifestyle</option>
        <option value="education">Education</option>
        <option value="business">Business</option>
        <option value="finance">Finance</option>
        <option value="science">Science</option>
        <option value="entertainment">Entertainment</option>
        <option value="sports">Sports</option>
        <option value="food">Food</option>
        <option value="fashion">Fashion</option>
        <option value="art">Art</option>
        <option value="music">Music</option>
        <option value="movies">Movies</option>
        <option value="books">Books</option>
        <option value="gaming">Gaming</option>
        <option value="politics">Politics</option>
        <option value="history">History</option>
        <option value="law">Law</option>
        <option value="healthcare">Healthcare</option>
        <option value="environment">Environment</option>
        <option value="automotive">Automotive</option>
        <option value="real-estate">Real Estate</option>
        <option value="parenting">Parenting</option>
        <option value="self-improvement">Self Improvement</option>
        <option value="spirituality">Spirituality</option>
        <option value="current-events">Current Events</option>
        <option value="others">Others</option>
      </select>
    </div>

    <div class="mb-6">
      <label
        for="status"
        class="block text-xs sm:text-sm md:text-base font-medium <%= user.settings.theme === 'dark' ? 'text-dark-text' : 'text-secondary' %> mb-2"
        >Status</label
      >
      <select
        id="status"
        name="status"
        class="<%= user.settings.theme === 'dark' ? 'bg-dark-sixth text-dark-secondary' : ' bg-background text-primary' %> block w-full px-4 py-2 text-xs sm:text-sm md:text-base border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-fourth focus:border-fourth"
      >
        <option value="published">Publish</option>
        <option value="draft">Draft</option>
        <option value="archived">Archive</option>
      </select>
    </div>

    <div class="mb-6">
      <label
        for="audience"
        class="block text-xs sm:text-sm md:text-base font-medium <%= user.settings.theme === 'dark' ? 'text-dark-text' : 'text-secondary' %> mb-2"
        >Audience Restrictions</label
      >
      <select
        id="audience"
        name="audience"
        class="<<%= user.settings.theme === 'dark' ? 'bg-dark-sixth text-dark-secondary' : ' bg-background text-primary' %> block w-full px-4 py-2 text-xs sm:text-sm md:text-base border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-fourth focus:border-fourth"
        required
      >
        <option value="public">Public</option>
        <option value="private">Private</option>
        <option value="subscribers">Subscribers Only</option>
      </select>
    </div>

    <div class="mb-4">
      <label
        for="metaTitle"
        class="block text-xs sm:text-sm md:text-base font-medium <%= user.settings.theme === 'dark' ? 'text-dark-primary' : 'text-secondary' %> mb-1"
        >SEO Title</label
      >
      <input
        type="text"
        id="metaTitle"
        name="metaTitle"
        maxlength="100"
        class="<%= user.settings.theme === 'dark' ? 'bg-dark-sixth text-dark-secondary' : ' bg-white text-secondary' %> w-full p-2 text-xs sm:text-sm md:text-base border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
        value="<%- blog.metaTitle || '' %>"
      />
      <p
        id="metaTitleError"
        class="text-red-500 text-xxs sm:text-xs md:text-sm"
      ></p>
    </div>

    <div class="mb-4">
      <label
        for="metaDescription"
        class="block text-xs sm:text-sm md:text-base font-medium <%= user.settings.theme === 'dark' ? 'text-dark-primary' : 'text-secondary' %> mb-1"
        >SEO Description</label
      >
      <textarea
        id="metaDescription"
        name="metaDescription"
        rows="7"
        maxlength="300"
        class="<%= user.settings.theme === 'dark' ? 'bg-dark-sixth text-dark-secondary' : ' bg-background text-primary' %> w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 resize-none text-xs sm:text-sm md:text-base"
      >
<%- blog.metaDescription || ''  %></textarea
      >
      <p
        id="metaDescriptionError"
        class="text-red-500 text-xxs sm:text-xs md:text-sm"
      ></p>
    </div>

    <div class="mb-6 flex justify-between items-center">
      <label
        for="summary"
        class="block text-xs sm:text-sm md:text-base font-medium <%= user.settings.theme === 'dark' ? 'text-dark-text' : 'text-secondary' %> mb-2 my-auto"
        >Summary</label
      >
      <div class="flex items-center">
        <label class="relative inline-flex items-center cursor-pointer">
          <input
            type="checkbox"
            id="summary"
            name="summary"
            class="sr-only peer <%= user.settings.theme === 'dark' ? 'bg-dark-sixth text-dark-secondary' : ' bg-background text-primary' %>"
          />
          <div
            class="w-11 h-6 bg-gray-200 peer-focus:outline-none rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-0.5 after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"
          ></div>
        </label>
      </div>
    </div>

    <div class="md:mt-16">
      <button
        type="submit"
        id="submit"
        class="btn-with-loader relative w-full py-2 px-4 font-roboto <%= user.settings.theme === 'dark' ? ' bg-dark-fourth' : ' border-fourth hover:text-fourth bg-blue-500' %> rounded-md hover:bg-blue-700 text-background"
      >
      <div
          class="loader-inner ball-beat hidden absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2"
        >
          <div
            class="w-2 h-2 sm:w-2.5 sm:h-2.5 md:w-3 md:h-3 bg-white rounded-full"
          ></div>
          <div
            class="w-2 h-2 sm:w-2.5 sm:h-2.5 md:w-3 md:h-3 bg-white rounded-full mx-1"
          ></div>
          <div
            class="w-2 h-2 sm:w-2.5 sm:h-2.5 md:w-3 md:h-3 bg-white rounded-full"
          ></div>
        </div>
        <span class="btn-text inline-block">Submit</span>
        
      </button>
    </div>
  </div>

  <div
    class="order-1 md:order-2 col-span-4 sm:col-span-3 p-3 md:p-2 lg:p-3 <%= user.settings.theme === 'dark' ? 'bg-dark-sixth text-dark-secondary' : ' bg-white' %> shadow-lg rounded-lg flex flex-col max-h-screen overflow-y-scroll"
    onclick="focusoneditor()"
  >
    <h1
      id="markdownLabel"
      for="markdown"
      class="text-sm sm:text-base md:text-lg lg:text-xl font-bold mb-2 lg:mb-6 <%= user.settings.theme === 'dark' ? 'text-dark-primary bg-dark-sixth' : 'text-secondary bg-white' %> sticky top-0 z-10 pb-1 lg:pb-2 w-full"
      onclick="event.stopPropagation()"
    >
      Markdown
    </h1>
    <div class="relative w-full bg-white rounded-xl">
      <div
        class="relative text-base text-gray-800 leading-relaxed font-medium flex flex-wrap"
      >
        <div id="editorWrapper" class="relative w-full">
          <div
            id="ghost"
            class="absolute inset-0 whitespace-pre-wrap break-words min-h-[150px] text-gray-400 pointer-events-none font-medium leading-relaxed z-0"
          ></div>

          <!-- Editable text area -->
          <div
            id="editor"
            contenteditable="true"
            spellcheck="false"
            data-placeholder="Start typing your content here..."
            class="relative z-10 whitespace-pre-wrap break-words min-h-[150px] bg-transparent focus:outline-none text-base text-gray-800 font-medium leading-relaxed"
          ></div>
        </div>
      </div>
    </div>
  </div>

  <div
    class="order-2 hidden sm:block md:order-3 col-span-1 p-3 md:p-2 lg:p-3 <%= user.settings.theme === 'dark' ? 'text-dark-primary bg-dark-sixth' : 'text-secondary bg-white' %> shadow-lg rounded-lg"
  >
    <div class="sticky top-0 h-auto max-h-[70vh]">
      <h2
        class="text-sm sm:text-base md:text-lg lg:text-xl font-bold mb-2 lg:mb-6"
      >
        Post Preview
      </h2>
      <div
        id="preview"
        class="<%= user.settings.theme === 'dark' ? 'border-dark-tertiary' : 'border-gray-300' %> rounded-lg box-content w-full scale-30 h-auto max-h-[80vh]"
      >
        <%- include("../../partials/blogPreview.ejs") %>
      </div>
    </div>
  </div>
</form>
<script>
  
document.addEventListener("DOMContentLoaded", () => {

   const editor = document.getElementById('editor');
    const ghost = document.getElementById('ghost');
        const markdownSaved = <%- JSON.stringify(blog.markdown || '') %>;
   editor.innerHTML = markdownSaved || '';
  editor.focus();
  
    const sanitizedHtmlContainer = document.getElementById("sanitizedHtml");
    // Set the initial content of the editor
    const htmlSaved = marked.parse(markdownSaved);
    const sanitizedHtmlSaved = DOMPurify.sanitize(htmlSaved);
    sanitizedHtmlContainer.innerHTML = sanitizedHtmlSaved;




  let timeout;

   window.focusoneditor = function focusoneditor() {
      const editor = document.getElementById("editor");
      console.log("editor", editor);
      editor.focus();
    }



    function debounce(func, delay) {
      let timeout;
      return (...args) => {
        clearTimeout(timeout);
        timeout = setTimeout(() => func(...args), delay);
      };
    }


    function escapeAndFormat(text) {
    return text
      .replace(/&/g, '&amp;')         // escape &
      .replace(/</g, '&lt;')          // escape <
      .replace(/>/g, '&gt;')          // escape >
      .replace(/ /g, '&nbsp;')        // preserve spaces
      .replace(/\n/g, '<br>');        // preserve newlines
  }

  function syncGhost(userText, suggestion) {
    console.log("syncGhost called with userText:", userText, "and suggestion:", suggestion);
    const userPart = escapeAndFormat(userText);
    const ghostPart = escapeAndFormat(suggestion);
    ghost.innerHTML = `<span>${userPart}</span><span class="text-gray-400">${ghostPart}</span>`;
  }

    const fetchSuggestion = async (text) => {

      if (text.trim() !== "") {
        const response = await fetch("/api/suggestion", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ prompt: text }),
        });
        let data = await response.json();
        const suggestion = data.suggestion;
        if (suggestion) {
          return suggestion;
        }else{
          return '';
        }
      }else{
        return '';
      }
    };

    const suggestionsEnabled = "<%= (user.settings.suggestions) %>";

    if (suggestionsEnabled == "true") {

    editor.addEventListener('input', () => {
      clearTimeout(timeout);
      const text = editor.innerText;
      timeout = setTimeout(async () => {
        const suggestion = await fetchSuggestion(text);
        syncGhost(text, suggestion);
      }, 400);
    });
    }

    function normalize(str) {
    return str.replace(/\u00A0/g, ' ') // replace non-breaking spaces
              .replace(/\s+/g, ' ')    // collapse multiple spaces
              .trim();
  }

        editor.addEventListener("keydown", (e) => {
    if (e.key === "Tab") {
      e.preventDefault();

      const suggestion = ghost.innerText;

     if (suggestion && normalize(suggestion).startsWith(normalize(editor.innerText))) {

        const completedText = suggestion;
        editor.innerText = completedText;
        ghost.innerHTML = "";

        const range = document.createRange();
        const sel = window.getSelection();
        range.selectNodeContents(editor);
        range.collapse(false);
        sel.removeAllRanges();
        sel.addRange(range);
      }
    }
  });

            const form = document.getElementById("articleForm");

            const metaTitleRegex = /^[\w\s\-.,;!]{1,100}$/;
            const metaDescriptionRegex = /^[\w\s\-.,;!]{1,300}$/;
            const markdownRegex = /^(.|\s)*$/;

            function validateField(inputElement, regex, errorElement, errorMessage) {
              if (!regex.test(inputElement.value)) {
                errorElement.textContent = errorMessage;
                inputElement.classList.add("border-red-500", "focus:ring-red-500");
                inputElement.classList.remove("border-gray-300", "focus:ring-fourth");
              } else {
                errorElement.textContent = "";
                inputElement.classList.add("border-gray-300", "focus:ring-fourth");
                inputElement.classList.remove("border-red-500", "focus:ring-red-500");
              }
            }

            document.getElementById("metaTitle").addEventListener("input", function () {
              validateField(
                this,
                metaTitleRegex,
                document.getElementById("metaTitleError"),
                "Invalid SEO title. Should be 1-60 characters long."
              );
            });

            document
              .getElementById("metaDescription")
              .addEventListener("input", function () {
                validateField(
                  this,
                  metaDescriptionRegex,
                  document.getElementById("metaDescriptionError"),
                  "Invalid SEO description. Should be 1-160 characters long."
                );
              });

            const submitButton = document.getElementById("submit");

            submitButton.addEventListener("click", function (event) {

              event.preventDefault();
               showBtnLoader(submitButton);
              const checkbox = document.getElementById("summary");
              let summaryValue = false;
              console.log("checked", checkbox);
              if (checkbox.checked) {
                console.log("checked", checkbox.checked);
                summaryValue = true;
              } else {
                console.log("checked", checkbox.checked);
                summaryValue = false;
              }

              const metaTitle = document.getElementById("metaTitle");
              const metaDescription = document.getElementById("metaDescription");
              const markdown = document.getElementById("editorWrapper");
              console.log("markdown", markdown);

              validateField(
                metaTitle,
                metaTitleRegex,
                document.getElementById("metaTitleError"),
                "Invalid SEO title. Should be 1-60 characters long."
              );
              console.log("metaDescription", metaDescription);
              validateField(
                metaDescription,
                metaDescriptionRegex,
                document.getElementById("metaDescriptionError"),
                "Invalid SEO description. Should be 1-160 characters long."
              );
              console.log("metadata", metaTitle, metaDescription);
              // validateField(
              //   markdown,
              //   markdownRegex,
              //   document.getElementById("markdownError"),
              //   "Invalid markdown content."
              // );

              if (
                metaTitle.classList.contains("border-gray-300") &&
                metaDescription.classList.contains("border-gray-300") &&
              markdown.innerHTML.trim() !== ""
              ) {
                const category = document.getElementById("category").value;
                const status = document.getElementById("status").value;
                const audience = document.getElementById("audience").value;
                const metaTitle = document.getElementById("metaTitle").value;
                const metaDescription =
                  document.getElementById("metaDescription").value;
                const markdown = document.getElementById("editor").innerHTML;

                console.log("markdown", markdown);
                console.log("category", category);
                console.log("status", status);

                fetch(`/api/blog/save/<%= blog.slug %>`, {
                  method: "PUT",
                  headers: {
                    "Content-Type": "application/json",
                  },
                  body: JSON.stringify({
                    category,
                    status,
                    audience,
                    metaTitle,
                    metaDescription,
                    markdown,
                    summaryValue,
                  }),
                })
                  .then((response) => {
                    if (!response.ok) {
                      hideBtnLoader(submitButton);
                      Toastify({
                        text: "Failed to save the blog",
                        duration: 4000,
                        gravity: "top",
                        position: "right",
                        backgroundColor: "linear-gradient(to right, #e52d27, #b31217)",
                        stopOnFocus: true,
                        close: true,
                        style: {
                          borderRadius: "10px",
                          boxShadow: "0 4px 12px rgba(0, 0, 0, 0.1)",
                          fontSize: "15px",
                          padding: "14px 18px",
                          fontFamily: "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif",
                          color: "#fff"
                        }
                      }).showToast();
                      return;
                    }
                    return response.json();
                  })
                  .then((data) => {
                    if (data.redirectUrl) {
                       Toastify({
                text: "Blog saved successfully!",
                duration: 4000,
                gravity: "top",
                position: "right",
                backgroundColor: "linear-gradient(to right, #00c6ff, #0072ff)", // Aqua to vibrant blue
                stopOnFocus: true,
                close: true,
                style: {
                  borderRadius: "10px",
                  boxShadow: "0 4px 12px rgba(0, 0, 0, 0.1)",
                  fontSize: "15px",
                  padding: "14px 18px",
                  fontFamily: "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif",
                  color: "#fff"
                }
              }).showToast();
                      window.location.href = data.redirectUrl;
                    } 
                  })
                  .catch((error) => {
                    hideBtnLoader(submitButton);
                     Toastify({
                text: "An error occurred while saving the blog",
                duration: 4000,
                gravity: "top",
                position: "right",
                backgroundColor: "linear-gradient(to right, #e52d27, #b31217)",
                stopOnFocus: true,
                close: true,
                style: {
                  borderRadius: "10px",
                  boxShadow: "0 4px 12px rgba(0, 0, 0, 0.1)",
                  fontSize: "15px",
                  padding: "14px 18px",
                  fontFamily: "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif",
                  color: "#fff"
                }
              }).showToast();
                  });
              }
            });

            const checkbox = document.getElementById("summary");
            const summaryValue = <%= blog.summary %>;

            checkbox.checked = summaryValue;
            console.log("summaryValue", summaryValue);

            const audience = document.getElementById("audience");
            const audienceValue = "<%= blog.audience %>";
            if (audienceValue) {
              audience.value = audienceValue;
            }

            const status = document.getElementById("status");
            const statusValue = "<%= blog.status %>";
            if (statusValue) {
              status.value = statusValue;
            }

            const category = document.getElementById("category");
            const categoryValue = "<%= blog.category %>";
            if (categoryValue) {
              category.value = categoryValue;
            }
            
});
</script>
