<div
  class="flex flex-col-reverse md:grid md:grid-cols-2 gap-6 py-16 px-4 sm:p-8 md:p-8 md:py-16"
>
  <div class="hidden md:flex justify-center items-center flex-col">
    <h2
      class="text-base sm:text-lg md:text-2xl font-bold <%= user.settings.theme === 'dark' ? 'text-dark-primary' : ' text-primary' %> text-center"
    >
      Two Factor Authentication
    </h2>
    <img
      src="images/twoFactorImg.svg"
      alt="Sign-in image"
      class="h-[80%] lg:h-96"
    />
    <p
      class="text-xs sm:text-base md:text-lg <%= user.settings.theme === 'dark' ? 'text-dark-secondary' : ' text-secondary' %> md:font-semibold mb-6 text-center"
    >
      Enter the 6-digit OTP sent to your email to securely complete two-factor
      authentication.
    </p>
  </div>
  <div
    class="max-w-7xl mx-auto md:mx-5 my-auto p-8 rounded-lg shadow-lg <%= user.settings.theme === 'dark' ? 'bg-dark-sixth border-dark-fourth bg-opacity-80' : ' bg-white border-gray-200 bg-opacity-50' %> backdrop-blur-sm border"
  >
    <h1
      class="text-lg sm:text-xl md:text-2xl font-bold text-center md:mb-2 flex justify-center items-center gap-2 <%= user.settings.theme === 'dark' ? 'text-dark-primary' : ' text-primary' %>"
    >
      <img src="images/logoImg/icon.png" class="h-10" alt="logo Img" /> Two
      Factor Authentication
    </h1>
    <h2
      class="text-sm sm:text-base md:text-lg <%= user.settings.theme === 'dark' ? 'text-dark-secondary' : ' text-secondary' %> md:font-semibold mb-6 text-center"
    >
      Please enter the 6-digit OTP.
    </h2>
    <form id="otpForm" class="space-y-6">
      <div class="h-16">
        <label
          for="otp"
          class="block text-sm font-medium <%= user.settings.theme === 'dark' ? 'text-dark-secondary' : ' text-secondary' %>"
        >
          OTP
        </label>
        <input
          type="text"
          name="username"
          id="username"
          value="<%= user.username %>"
          hidden
        />
        <input
          type="text"
          name="code"
          id="otp"
          required
          pattern="\d{6}"
          maxlength="6"
          class="mt-1 block w-full px-3 py-2 border <%= user.settings.theme === 'dark' ? ' bg-dark-sixth border-dark-fourth focus:ring-dark-tertiary focus:border-dark-tertiary' : 'border-gray-300 focus:ring-fourth focus:border-fourth text-primary' %> rounded-md shadow-sm focus:outline-none sm:text-sm"
        />
        <p class="text-xs text-red-600 mt-1 hidden" id="otpError"></p>
      </div>
      <div>
        <button
          type="submit"
          class="w-full bg-blue-500 text-white py-2 px-4 rounded-md hover:bg-gradient-to-r hover:from-blue-500 hover:to-purple-600 transition duration-300 relative hover:-translate-y-0.5"
        >
          Submit OTP
          <span
            class="absolute inset-0 bg-blue-700 opacity-0 rounded-lg transition-opacity duration-300 hover:opacity-20"
          ></span>
        </button>
      </div>
    </form>
    <div class="text-xs md:text-sm text-center mt-4">
      <p>
        <span
          id="timer"
          class="<%= user.settings.theme === 'dark' ? 'text-dark-secondary' : ' text-tertiary' %>"
        >
          Resend OTP available in: 30s
        </span>
        <br />
        <a href="#" id="resendLink" class="text-blue-500">Resend OTP</a>
      </p>
    </div>
  </div>
</div>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const username = "<%= user.username %>";

    if (!username) {
      console.error("Username parameter is missing");
    }

    const form = document.getElementById("otpForm");

    const timerDisplay = document.getElementById("timer");
    let canResend = true;
    const resendTimeout = 30000;

    const updateResendLink = (enabled) => {
      resendLink.textContent = enabled ? "Resend OTP" : "Wait 30 seconds";
      resendLink.style.pointerEvents = enabled ? "auto" : "none";
      resendLink.style.color = enabled ? "#1d4ed8" : "#9ca3af";
    };

    const startResendCountdown = () => {
      let remainingTime = resendTimeout / 1000;
      updateResendLink(false);

      const countdown = setInterval(() => {
        if (remainingTime <= 0) {
          clearInterval(countdown);
          canResend = true;
          updateResendLink(true);
          timerDisplay.textContent = "Resend OTP available now";
        } else {
          remainingTime -= 1;
          timerDisplay.textContent = `Resend OTP available in: ${remainingTime}s`;
        }
      }, 1000);
    };

    resendLink.addEventListener("click", async (e) => {
      e.preventDefault();
      if (canResend) {
        try {
          const resendUrl = `/auth/resendOTP?username=${username}`;
          const res = await fetch(resendUrl, {
            method: "GET",
            headers: {
              "Content-Type": "application/json",
            },
          });

          if (res.status !== 201) {
            throw new Error("Failed to resend OTP");
          }
        } catch (error) {
          Toastify({
            text: "Error resending OTP. Please try again.",
            duration: 4000,
            gravity: "top",
            position: "right",
            backgroundColor: "linear-gradient(to right, #e52d27, #b31217)",
            stopOnFocus: true,
            close: true,
            style: {
              borderRadius: "10px",
              boxShadow: "0 4px 12px rgba(0, 0, 0, 0.1)",
              fontSize: "15px",
              padding: "14px 18px",
              fontFamily: "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif",
              color: "#fff",
            },
          }).showToast();
        }

        startResendCountdown();
      }
    });

    startResendCountdown();

    form.addEventListener("submit", async (e) => {
      e.preventDefault();

      const otpInput = document.getElementById("otp");
      const otpError = document.getElementById("otpError");

      if (!/^\d{6}$/.test(otpInput.value)) {
        otpError.textContent = "Invalid OTP. Please enter a 6-digit code.";
        otpError.classList.remove("hidden");
        return;
      } else {
        otpError.classList.add("hidden");
      }

      const code = otpInput.value;
      try {
        const response = await fetch("/auth/twoFactorVerify", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ code, username }),
        });

        const result = await response.json();

        if (response.status === 200) {
          Toastify({
            text: "OTP verified successfully!",
            duration: 4000,
            gravity: "top",
            position: "right",
            backgroundColor: "linear-gradient(to right, #00b09b, #96c93d)",
            close: true,
          }).showToast();

          setTimeout(() => {
            window.location.href = result.redirect;
          }, 1000);
        } else {
          throw new Error(result.msg || "Verification failed");
        }
      } catch (error) {
        console.error(error);
        Toastify({
          text: "Error verifying OTP. Please try again.",
          duration: 4000,
          gravity: "top",
          position: "right",
          backgroundColor: "linear-gradient(to right, #e52d27, #b31217)",
          stopOnFocus: true,
          close: true,
          style: {
            borderRadius: "10px",
            boxShadow: "0 4px 12px rgba(0, 0, 0, 0.1)",
            fontSize: "15px",
            padding: "14px 18px",
            fontFamily: "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif",
            color: "#fff",
          },
        }).showToast();
      }
    });
  });
</script>
