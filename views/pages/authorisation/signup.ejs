<div class="md:grid md:grid-cols-2 py-16 px-4 sm:p-8 md:p-8 md:py-12" >
  <div
    class="hidden mx-auto my-10  md:flex flex-col items-center justify-center"
  >
    <h2 class="text-2xl font-bold text-primary text-center -mb-10">
      Join Our Community!
    </h2>
    <img src="images/signupImg.svg" alt="signup image"   class="h-[80%] lg:h-96"/>
    <p class="text-lg text-secondary font-semibold mb-6 text-center">
      By signing up, youâ€™ll become part of a vibrant community of professionals
      who are passionate about innovation and knowledge sharing.
    </p>
  </div>

  <div
    class="max-w-7xl mx-auto md:mx-5 px-8 py-10 md:my-10 sm:p-6 rounded-lg shadow-lg bg-white bg-opacity-50 backdrop-blur-sm border border-gray-200 grid grid-cols-1 gap-4 sm:gap-0"
  >
    <h1 class="text-base sm:text-lg md:text-2xl font-semibold md:font-bold text-center flex justify-center items-center gap-2 text-primary">
      <img src="images/logoImg/icon.png " class="h-10 rounded-md" alt="logo Img" /> Create an Account
    </h1>
    <h2
      class="text-sm sm:text-base md:text-lg text-secondary md:font-semibold mb-2 text-center"
    >
      Create an account to enjoy our services.
    </h2>
    <form
      id="signupForm"
      action="/auth/register"
      method="POST"
      enctype="application/x-www-form-urlencoded"
      class="md:space-y-4 space-y-2"
    >
      <!-- Personal Information -->
      <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
        <div class="h-16">
          <label for="firstName" class="block text-xs  sm:text-sm font-medium text-secondary"
            >First Name</label
          >
          <input
            type="text"
            name="firstname"
            id="firstName"
            minlength="2"
            maxlength="50"
            required
            class=" block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-fourth text-primary focus:border-fourth text-xs  sm:text-sm"
          />
          <p class="text-xs text-red-600  hidden" id="firstNameError">
            Required and must be letters only.
          </p>
        </div>
        <div class="h-16">
          <label for="lastName" class="block text-xs  sm:text-sm font-medium text-secondary"
            >Last Name</label
          >
          <input
            type="text"
            name="lastname"
            minlength="2"
            maxlength="50"
            required
            id="lastName"
            class=" block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-fourth text-primary focus:border-fourth text-xs  sm:text-sm"
          />
          <p class="text-xs text-red-600  hidden" id="lastNameError">
            Required and must be letters only.
          </p>
        </div>
      </div>

      <!-- Account Details -->
      <div class="grid grid-cols-1  gap-4">
        <div class="h-16">
          <label for="username" class="block text-xs  sm:text-sm font-medium text-secondary"
            >Username</label
          >
          <input
            type="text"
            name="username"
            id="username"
            minlength="2"
            maxlength="50"
            required
            class=" block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-fourth text-primary focus:border-fourth text-xs  sm:text-sm"
          />
          <p  class="text-xs text-red-600  hidden" id="usernameError">
            Required and must be alphanumeric.
          </p>
        </div>

      </div>

      <!-- Contact Information -->
      <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
        <div class="h-16">
          <label for="phone" class="block text-xs  sm:text-sm font-medium text-secondary"
            >Phone</label
          >
          <input
            type="tel"
            name="phone"
            id="phone"
            minlength="10"
            maxlength="10"
            required
            class=" block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-fourth text-primary focus:border-fourth text-xs  sm:text-sm"
          />
          <p class="text-xs text-red-600  hidden" id="phoneError">
            Required and must be in the correct format.
          </p>
        </div>
        <div>
          <label for="email" class="block text-xs  sm:text-sm font-medium text-secondary"
            >Email</label
          >
          <input
            type="email"
            name="email"
            id="email"
            minlength="5"
            maxlength="50"
            required
            class=" block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-fourth text-primary focus:border-fourth text-xs  sm:text-sm"
          />
          <p class="text-xs text-red-600  hidden" id="emailError">
            Please enter a valid email address.
          </p>
        </div>
      </div>

      <!-- Password -->
       <div class="grid grid-cols-1 gap-4">
      <div class="h-16">
        <label for="password" class="block text-xs  sm:text-sm font-medium text-secondary"
          >Password</label
        >
        <input
          type="password"
          name="password"
          id="password"
          minlength="8"
          maxlength="50"
          required
          class=" block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-fourth text-primary focus:border-fourth text-xs  sm:text-sm"
        />
        <p class="text-xs text-red-600  hidden" id="passwordError">
          Required and must be at least 8 characters long, including
          uppercase, lowercase, and numbers.
        </p>
      </div>
      <div class="h-16">
        <label
          for="confirmPassword"
          class="block text-xs  sm:text-sm font-medium text-secondary"
          >Confirm Password</label
        >
        <input
          type="password"
          name="confirmPassword"
          id="confirmPassword"
          minlength="8"
          maxlength="50"
          required
          class=" block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-fourth text-primary focus:border-fourth text-xs  sm:text-sm"
        />
        <p class="text-xs text-red-600  hidden" id="confirmPasswordError">
          Passwords do not match.
        </p>
      </div>
    </div>

      <!-- Submit Button -->
      <div>
        <button
          type="submit"
          class="w-full bg-blue-500 text-white py-2 px-4 rounded-md hover:bg-gradient-to-r hover:from-blue-500 hover:to-purple-600  transition duration-300 text-xs  sm:text-sm relative"
        >
          Sign Up
          <span
            class="absolute inset-0 bg-blue-700 opacity-0 rounded-lg transition-opacity duration-300 hover:opacity-20"
          ></span>
        </button>
      </div>
    </form>
    <div class="text-xs md:text-sm text-center mt-4 ">
      <p class="text-primary"> 
        Already have an account?
        <a href="/signin" class="text-blue-500">Sign In</a>
      </p>
    </div>
  </div>
</div>

<script>
  // Regex patterns
  const regex = {
    name: /^[A-Za-z]+$/,
    username: /^[A-Za-z0-9_]+$/,
    phone: /^\+?[1-9]\d{1,14}$/,
    email: /^[^\s@]+@[^\s@]+\.[^\s@]+$/,
    password: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d).{8,}$/,
  };

  const usernameInput = document.getElementById("username");
  const suggestUsername = document.getElementById("usernameError");
  let isUniqueUsername = false;
  usernameInput.addEventListener("input",async function () {
    const username = usernameInput.value.trim();
    
    if (regex.username.test(username.value)) {
      try {
            const response = await fetch(`/api/profile/available/${username}`, {
      method: "GET",
    });

    const data = await response.json();

    if (data.available) {
      isUniqueUsername = true;
      suggestUsername.classList.add("hidden");
    } else {
      isUniqueUsername = false;
      suggestUsername.classList.remove("hidden");
      suggestUsername.innerText = "Username is already taken.";
    }

      } catch (error) {
        isUniqueUsername = false;
        console.error("Error checking username availability:", error);
      }
      console.log(isUniqueUsername);
    } else {
      suggestUsername.classList.remove("hidden");
      suggestUsername.innerText = "Required and must be alphanumeric.";
    }
  });

  // Error handling function
  function showError(input, message) {
    const errorElement = document.getElementById(`${input.id}Error`);
    input.classList.add("error");
    errorElement.textContent = message;
    errorElement.classList.remove("hidden");
  }

  // Clear error handling function
  function clearError(input) {
    
    const errorElement = document.getElementById(`${input.id}Error`);
    
    input.classList.remove("error");
    errorElement.textContent = "";
    errorElement.classList.add("hidden");
  }

 document.getElementById("signupForm").addEventListener("submit", async function (e) {
  e.preventDefault();
  let hasError = false;
  const firstName = document.getElementById("firstName");
  const lastName = document.getElementById("lastName");
  const username = document.getElementById("username");
  const phone = document.getElementById("phone");
  const email = document.getElementById("email");
  const password = document.getElementById("password");
  const confirmPassword = document.getElementById("confirmPassword");


  if (!regex.name.test(firstName.value)) {
    showError(firstName, "First name must contain letters only.");
    hasError = true;
  } else {
    clearError(firstName);
  }

  
  if (!regex.name.test(lastName.value)) {
    showError(lastName, "Last name must contain letters only.");
    hasError = true;
  } else {
    clearError(lastName);
  }

  
  if (!regex.username.test(username.value)) {
    showError(username, "Username must be alphanumeric.");
    hasError = true;
  } else if (!isUniqueUsername) {
    showError(username, "Username is already taken.");
    hasError = true;
  } else {
    clearError(username);
  }


  if (!regex.phone.test(phone.value)) {
    showError(phone, "Phone number format is invalid.");
    hasError = true;
  } else {
    clearError(phone);
  }

  
  if (!regex.email.test(email.value)) {
    showError(email, "Please enter a valid email.");
    hasError = true;
  } else {
    clearError(email);
  }

  
  if (!regex.password.test(password.value)) {
    showError(password, "Password must be at least 8 characters long and include uppercase, lowercase, and a number.");
    hasError = true;
  } else {
    clearError(password);
  }

  
  if (password.value !== confirmPassword.value) {
    showError(confirmPassword, "Passwords do not match.");
    hasError = true;
  } else {
    clearError(confirmPassword);
  }

  if (hasError) {
    Toastify({
        text: "Please fix the errors before submitting.",
        duration: 4000,
        gravity: "top",
        position: "right",
        backgroundColor: "linear-gradient(to right, #e52d27, #b31217)",
        stopOnFocus: true,
        close: true,
        style: {
          borderRadius: "10px",
          boxShadow: "0 4px 12px rgba(0, 0, 0, 0.1)",
          fontSize: "15px",
          padding: "14px 18px",
          fontFamily: "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif",
          color: "#fff",
        },
      }).showToast();
    e.preventDefault();
  }
  const formData = {
      firstname: firstName.value,
      lastname: lastName.value,
      username: username.value,
      phone: phone.value,
      email: email.value,
      password: password.value,
    };

   try {
      const res = await fetch("/auth/register", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(formData),
      });

      const result = await res.json();

      if (!res.ok) {
        
        Toastify({
          text: result.error || "Something went wrong.",
          duration: 4000,
          gravity: "top",
          position: "right",
          backgroundColor: "linear-gradient(to right, #e52d27, #b31217)",
          stopOnFocus: true,
          close: true,
          style: {
            borderRadius: "10px",
            boxShadow: "0 4px 12px rgba(0, 0, 0, 0.1)",
            fontSize: "15px",
            padding: "14px 18px",
            fontFamily: "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif",
            color: "#fff",
          },
        }).showToast();
        return;
      }

      
      Toastify({
        text: "Registration successful! Redirecting...",
        duration: 3000,
        gravity: "top",
        position: "right",
        backgroundColor: "linear-gradient(to right, #00b09b, #96c93d)",
        stopOnFocus: true,
        close: true,
      }).showToast();

      setTimeout(() => {
        window.location.href = result.redirect || "/signin";
      }, 2000);

    } catch (error) {
      Toastify({
        text: "Server error. Please try again later.",
        duration: 4000,
        gravity: "top",
        position: "right",
        backgroundColor: "linear-gradient(to right, #e52d27, #b31217)",
        stopOnFocus: true,
        close: true,
      }).showToast();
    }
});

 document.getElementById("signupForm").addEventListener("input", function (e) {
    const input = e.target;

    switch (input.id) {
      case "firstName":
      case "lastName":
        if (!regex.name.test(input.value)) {
          showError(
            input,
            `Required and must be letters only.`
          );
        } else {
          clearError(input);
        }
        break;
      case "username":
        if (!regex.username.test(input.value)) {
          showError(input, "Required and must be alphanumeric.");
        } else {
          clearError(input);
        }
        break;
      case "phone":
        if (!regex.phone.test(input.value)) {
          showError(
            input,
            "Required and must be in the correct format."
          );
        } else {
          clearError(input);
        }
        break;
      case "email":
        if (!regex.email.test(input.value)) {
          showError(input, "Please enter a valid email address.");
        } else {
          clearError(input);
        }
        break;
      case "password":
        if (!regex.password.test(input.value)) {
          showError(
            input,
            "Required and must be at least 8 characters long, including uppercase, lowercase, and numbers."
          );
        } else {
          clearError(input);
        }
        break;
      case "confirmPassword":
        if (input.value !== document.getElementById("password").value) {
          showError(input, "Passwords do not match.");
        } else {
          clearError(input);
        }
        break;
    }
  });

</script>
