<div class="flex flex-col-reverse md:grid md:grid-cols-2 gap-6 py-16 px-4 sm:p-8 md:p-8 md:py-16">
  <div class="hidden md:flex justify-center items-center flex-col">
    <h2
      class="text-base sm:text-lg md:text-2xl font-bold <%= user.settings.theme === 'dark' ? 'text-dark-primary' : ' text-primary' %>  text-center"
    >
      Forgot Your Password?
    </h2>
    <img
      src="images/resetImg.svg"
      alt="Sign-in image"
      class="h-[80%] lg:h-96"
    />
    <p
      class="text-xs sm:text-base md:text-lg <%= user.settings.theme === 'dark' ? 'text-dark-secondary' : ' text-secondary' %>  md:font-semibold mb-6 text-center"
    >
      Enter a new password to securely reset your account password.
    </p>
  </div>

  <div
    class="max-w-7xl mx-auto md:mx-5 my-auto p-8 rounded-lg shadow-lg <%= user.settings.theme === 'dark' ? 'bg-dark-sixth border-dark-fourth bg-opacity-80' : ' bg-white border-gray-200 bg-opacity-50' %> backdrop-blur-sm border "
  >
    <h1
      class="text-lg sm:text-xl md:text-2xl font-bold text-center md:mb-2 flex justify-center items-center gap-2 <%= user.settings.theme === 'dark' ? 'text-dark-primary' : ' text-primary' %>"
    >
      <img src="images/logoImg/icon.png" alt="logo Img" class="h-10" />Password
      Reset
    </h1>
    <h2
      class="text-sm sm:text-base md:text-lg <%= user.settings.theme === 'dark' ? 'text-dark-secondary' : ' text-secondary' %> md:font-semibold mb-6 text-center"
    >
      Please enter your new password and confirm it.
    </h2>
    <form
      id="resetForm"
      class="space-y-6"
    >
      <div class="h-16">
        <label for="password" class="block text-sm font-medium <%= user.settings.theme === 'dark' ? 'text-dark-secondary' : ' text-secondary' %>"
          >New Password</label
        >
        <input
          type="password"
          name="password"
          id="password"
          required
          minlength="8"
          class="mt-1 block w-full px-3 py-2 border rounded-md shadow-sm focus:outline-none sm:text-sm <%= user.settings.theme === 'dark' ? ' bg-dark-sixth border-dark-fourth focus:ring-dark-tertiary focus:border-dark-tertiary' : 'border-gray-300 focus:ring-fourth focus:border-fourth text-primary' %>"
        />
        <p class="text-xs text-red-600 mt-1 hidden" id="passwordError"></p>
      </div>
      <div class="h-16">
        <label
          for="confirmPassword"
          class="block text-sm font-medium <%= user.settings.theme === 'dark' ? 'text-dark-secondary' : ' text-secondary' %>"
          >Confirm Password</label
        >
        <input
          type="password"
          name="confirmPassword"
          id="confirmPassword"
          required
          minlength="8"
          class="mt-1 block w-full px-3 py-2 border  rounded-md shadow-sm focus:outline-none sm:text-sm <%= user.settings.theme === 'dark' ? ' bg-dark-sixth border-dark-fourth focus:ring-dark-tertiary focus:border-dark-tertiary' : 'border-gray-300 focus:ring-fourth focus:border-fourth text-primary' %>"
        />
        <p
          class="text-xs text-red-600 mt-1 hidden"
          id="confirmPasswordError"
        ></p>
      </div>
      <div>
        <button
          type="submit"
          class="w-full bg-blue-500 text-white py-2 px-4 rounded-md hover:bg-gradient-to-r hover:from-blue-500 hover:to-purple-600  transition duration-300 relative hover:-translate-y-0.5"
        >
          Submit New Password
          <span
          class="absolute inset-0 bg-blue-700 opacity-0 rounded-lg transition-opacity duration-300 hover:opacity-20"
        ></span>
        </button>
      </div>
    </form>
  </div>
</div>
<script>
  document
    .getElementById("password")
    .addEventListener("input", validatePassword);
  document
    .getElementById("confirmPassword")
    .addEventListener("input", validatePassword);

  function validatePassword() {
    const password = document.getElementById("password").value;
    const confirmPassword = document.getElementById("confirmPassword").value;
    const passwordError = document.getElementById("passwordError");
    const confirmPasswordError = document.getElementById(
      "confirmPasswordError"
    );

    
    const regex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d).{8,}$/;

    if (!regex.test(password)) {
      passwordError.textContent =
        "Invalid password.";
      passwordError.classList.remove("hidden");
    } else {
      passwordError.classList.add("hidden");
    }

    if (password !== confirmPassword) {
      confirmPasswordError.textContent = "Passwords do not match.";
      confirmPasswordError.classList.remove("hidden");
    } else {
      confirmPasswordError.classList.add("hidden");
    }
  }

  document.getElementById("resetForm").addEventListener("submit", async function (event) {
    event.preventDefault(); 

    const form = event.target;
    const formData = new FormData(form);
    const password = formData.get("password");
    const confirmPassword = formData.get("confirmPassword");
    const passwordError = document.getElementById("passwordError");
    const confirmPasswordError = document.getElementById("confirmPasswordError");

    // Validation before submission
    if (password !== confirmPassword) {
        confirmPasswordError.textContent = "Passwords do not match.";
        confirmPasswordError.classList.remove("hidden");
        return;
    }

    // Prepare the payload for the PUT request
    const payload = {
        password: password,
        username: "<%= username %>", 
    };

    // Send form data to the server using PUT
    try {
        const response = await fetch("/auth/resetPassword", {
            method: "PUT", 
            headers: {
                'Content-Type': 'application/json' 
            },
            body: JSON.stringify(payload),
        });

        if (response.status === 201) {
            
            window.location.href = "/signin";
        } else {
            throw new Error("Failed to reset password");
        }
    } catch (error) {
        Toastify({
                text: "Eror resetting password. Please try again.",
                duration: 4000,
                gravity: "top",
                position: "right",
                backgroundColor: "linear-gradient(to right, #e52d27, #b31217)",
                stopOnFocus: true,
                close: true,
                style: {
                  borderRadius: "10px",
                  boxShadow: "0 4px 12px rgba(0, 0, 0, 0.1)",
                  fontSize: "15px",
                  padding: "14px 18px",
                  fontFamily: "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif",
                  color: "#fff"
            }
         }).showToast();
    }
});
</script>
