<!-- <h1 class="text-base sm:text-lg md:text-xl lg:text-2xl <%= user.settings.theme === 'dark' ? 'text-dark-secondary bg-dark-background' : 'text-tertiary bg-white bg-background' %> sticky top-0 font lora z-10 font-semibold mt-8 md:mt-0 p-3  md:px-10">
  Your Reports
</h1> -->

<div
  class="relative overflow-x-scroll <%= user.settings.theme === 'dark' ? 'border-dark-secondary bg-dark-sixth' : 'border-tertiary bg-background '  %> border rounded-md pb-20"
>
  <table
    class="table-auto w-full overflow-x-scroll text-xs md:text-sm lg:text-base sticky top-0  shadow-md"
  >
    <thead>
      <tr
        class="<%= user.settings.theme === 'dark' ? 'bg-dark-sixth text-dark-secondary' : 'bg-background text-secondary' %>"
      >
        <th class="p-1 md:p-2 lg:px-4 lg:py-2 font-normal">Blog</th>
        <th class="p-1 md:p-2 lg:px-4 lg:py-2 font-normal">Title</th>
        <th class="p-1 md:p-2 lg:px-4 lg:py-2 whitespace-nowrap font-normal">
          Time Left
        </th>
        <th class="p-1 md:p-2 lg:px-4 lg:py-2 font-normal">Status</th>
        <th class="p-1 md:p-2 lg:px-4 lg:py-2 font-normal"></th>
      </tr>
    </thead>
    <tbody id="reportsTableBody"></tbody>
  </table>
</div>

<div id="paginationToggle" class="my-4 flex justify-center gap-1 w-full"></div>

<div
  id="reportInfoModal"
  class="fixed inset-0 <%= user.settings.theme === 'dark' ? 'bg-dark-background text-dark-text' : ' text-text bg-primary' %> backdrop-blur-sm bg-opacity-50 flex items-center justify-center hidden z-20 p-5 md:p-0"
  onclick="closeModal()"
>
  <div
    onclick="event.stopPropagation()"
    class="<%= user.settings.theme === 'dark' ? 'bg-dark-sixth text-dark-text' : 'bg-background text-text' %> p-4 rounded-lg w-full sm:w-1/2 lg:w-1/3"
  >
    <div class="flex justify-between items-center">
      <h2
        class="text-xl font-semibold <%= user.settings.theme === 'dark' ? 'text-dark-primary' : 'text-primary' %>"
        id="modalTitle"
      ></h2>
      <p
        class="text-base <%= user.settings.theme === 'dark' ? 'text-dark-primary' : 'text-tertiary' %>"
        id="modalDate"
      ></p>
    </div>
    <textarea
      id="modalDescription"
      class="mt-2 resize-none w-full bg-transparent <%= user.settings.theme === 'dark' ? 'text-dark-primary' : 'text-secondary' %>"
      row-5
      readonly
    ></textarea>
    <div class="flex w-full justify-end">
      <button
        id="closeModalBtn"
        class="px-4 py-2 rounded-md border border-gray-300 text-sm font-medium <%= user.settings.theme === 'dark' ? 'text-gray-300 hover:bg-dark-fourth' : 'text-gray-700 hover:bg-gray-100' %> transition duration-200"
        onclick="closeModal()"
      >
        Close
      </button>
      <div id="actionButton" class="mt-4 flex justify-between"></div>
    </div>
  </div>
</div>

<div
  id="deleteReportModal"
  class="fixed inset-0 <%= user.settings.theme === 'dark' ? 'bg-dark-primary text-dark-text' : ' text-text bg-primary' %> backdrop-blur-sm bg-opacity-50 flex items-center justify-center hidden z-20 p-5 md:p-0"
  onclick="closeDeleteReportModal()"
>
  <div
    class="<%= user.settings.theme === 'dark' ? 'bg-dark-background text-dark-text' : 'bg-background text-text' %> p-4 rounded-lg w-full sm:w-1/2 lg:w-1/3"
    onclick="event.stopPropagation()"
  >
    <div class="flex items-center justify-between mb-4">
      <h2 class="text-xl font-semibold font-sans">Delete Report</h2>
      <button
        onclick="closeDeleteReportModal()"
        class="text-gray-400 hover:text-red-500 transition duration-200 text-xl"
        aria-label="Close"
      >
        &times;
      </button>
    </div>
    <p class="text-sm mb-6 <%= user.settings.theme === 'dark' ? 'text-gray-400' : 'text-gray-600' %>" id="deleteModalDescription ">
      Are you sure you want to delete this report?
    </p>
    <div class="mt-4 flex justify-end gap-4">
      <button
        id="cancelDeleteButton"
        class="px-4 py-2 rounded-md border border-gray-300 text-sm font-medium <%= user.settings.theme === 'dark' ? 'text-gray-300 hover:bg-dark-primary' : 'text-gray-700 hover:bg-gray-100' %> transition duration-200"
        onclick="closeDeleteReportModal()"
      >
        Cancel
      </button>
      <button
        id="confirmDeleteButton"
        class=" btn-with-loader relative flex justify-center items-center px-4 py-2 rounded-md bg-red-600 hover:bg-red-700 text-white text-sm font-medium shadow-md transition duration-200"
      >
      <div
          class="flex justify-between items-center loader-inner ball-beat hidden absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2"
        >
          <div
            class="w-2 h-2 sm:w-2.5 sm:h-2.5 md:w-3 md:h-3 bg-white rounded-full"
          ></div>
          <div
            class="w-2 h-2 sm:w-2.5 sm:h-2.5 md:w-3 md:h-3 bg-white rounded-full mx-1"
          ></div>
          <div
            class="w-2 h-2 sm:w-2.5 sm:h-2.5 md:w-3 md:h-3 bg-white rounded-full"
          ></div>
        </div>
        <span class="btn-text inline-block">Delete Report</span>
        
      </button>
    </div>
  </div>
</div>

<script>
  let currentReportId = null;

  function calculateTimeLeft(reportDate) {
    const currentDate = new Date();
    const reportCreatedAt = new Date(reportDate);
    const timeDiff =
      reportCreatedAt.getTime() +
      7 * 24 * 60 * 60 * 1000 -
      currentDate.getTime();

    if (timeDiff > 0) {
      const daysLeft = Math.floor(timeDiff / (1000 * 60 * 60 * 24));
      return `${daysLeft} days left`;
    } else {
      return "Time's up!";
    }
  }

  function showModal(
    reason,
    description,
    reportCreatedAt,
    blogUpdatedAt,
    reportId,
    slug,
    date
  ) {
    document.getElementById("modalTitle").innerText = reason;
    document.getElementById("modalDescription").innerText = description;
    document.getElementById("modalDate").innerText = date;

    document.getElementById("reportInfoModal").classList.remove("hidden");

    const actionButtonContainer = document.getElementById("actionButton");
    actionButtonContainer.innerHTML = "";

    const reportCreatedAtDate = new Date(reportCreatedAt);
    const blogUpdatedAtDate = new Date(blogUpdatedAt);

    if (reportCreatedAtDate < blogUpdatedAtDate) {
      const goToBlogBtn = document.createElement("button");
      goToBlogBtn.classList.add(
        "px-4",
        "py-2",
        "bg-green-500",
        "text-white",
        "rounded"
      );

      goToBlogBtn.innerText = "Go to Blog";
      
      goToBlogBtn.onclick = function () {
        window.location.href = `/blog/${slug}`;
      };

      const deleteReportBtn = document.createElement("button");
      deleteReportBtn.classList.add(
        "px-4",
        "py-2",
        "bg-red-500",
        "text-white",
        "rounded"
      );
      deleteReportBtn.innerText = "Delete Report";
      deleteReportBtn.onclick = function () {
        deleteReport(reportId);
      };

      actionButtonContainer.appendChild(goToBlogBtn);
      actionButtonContainer.appendChild(deleteReportBtn);
    }
  }

  function closeModal() {
    document.getElementById("reportInfoModal").classList.add("hidden");
  }

  function openDeleteReportModal(reportId) {
    currentReportId = reportId;
    document.getElementById("deleteReportModal").classList.remove("hidden");
  }

  function closeDeleteReportModal() {
    document.getElementById("deleteReportModal").classList.add("hidden");
  }

  const reportsPerPage = 10;

  async function loadReports(page = 1) {
    const reportsTableBody = document.getElementById("reportsTableBody");

    try {
      const response = await fetch(
        `/api/reports?page=${page}&pageSize=${reportsPerPage}`,
        {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
          },
        }
      );

      if (response.ok) {
        const data = await response.json();
        const reports = data.reports;
        const totalReports = data.totalReports;

        console.log("reports\n", reports, "\ntotalReports\n", totalReports);

        if (totalReports <= 0) {
          reportsTableBody.innerHTML = `<tr class="<%= user.settings.theme === 'dark' ? 'bg-dark-background text-dark-secondary' : 'bg-background  text-secondary' %>">
          <td class="border <%=
            user.settings.theme === 'dark' ? 'border-dark-secondary' : 'border-fourth'
          %> p-2 md:px-4 md:py-2 mx-auto text-center w-96 overflow-x-scroll whitespace-nowrap text-xs md:text-sm lg:text-base " colspan="7">No reports found</td>
        </tr>`;
          return;
        }

        reportsTableBody.innerHTML = "";
        const statusStyles = {
          Pending: "bg-yellow-200 text-yellow-800",
          Resolved: "bg-green-200 text-green-800",
          Reviewed: "bg-blue-200 text-blue-800",
          Deleted: "bg-red-200 text-red-800",
        };

        reports.forEach((report) => {
          const timeLeft = calculateTimeLeft(report.createdAt);

          const row = `
            <tr data-report-id="${
              report._id
            }" class="<%= user.settings.theme === 'dark' ? 'bg-dark-sixth text-dark-secondary' : 'bg-background  text-secondary' %>  border-y  <%= user.settings.theme === 'dark' ? 'border-dark-secondary' : 'border-fourth' %> -z-10" onmouseleave="HideReportOptions('${
            report._id
          }')">
              <td class="p-2 md:px-4 md:py-2">
                <a href="/blog/${report.blogId.slug}" target="_blank">
                  <img src="${report.blogId.blogPhoto}" alt="${
            report.blogId.title
          }" class="object-cover w-10 md:w-full h-10">
                </a>
              </td>
              <td class=" p-2 md:px-4 md:py-2 mx-auto text-center overflow-x-scroll whitespace-nowrap text-xs md:text-sm lg:text-base  ">${truncateText(
                report.blogId.title,
                15
              )}</td>
             <td class="p-2 md:px-4 md:py-2 text-center align-middle whitespace-nowrap text-xs md:text-sm lg:text-base">
                ${timeLeft}
            </td>
             <td class=" p-2 md:px-4 md:py-2 mx-auto text-center text-xs md:text-sm lg:text-base ${
               statusStyles[report.status] || "bg-gray-200 text-gray-800"
             } ">
                ${report.status}
              </td>
              <td class=" p-2 md:px-4 md:py-2 text-center relative ">
                 <button onclick='openReportMore("${report._id}")'>
                                      <img src="images/icons/verticalMoreIcon.svg"      alt="More"
                                        class="w-4 h-4 sm:w-5 sm:h-5 md:w-6 md:h-6                lg:w-7 lg:h-7 z-0  <%=
            user.settings.theme === 'dark' ? '' : 'invert'
          %> ">
                                    </button>

                <div class="absolute top-0 right-0 z-50 p-2 space-y-2 <%= user.settings.theme === 'dark' ? 'bg-dark-fifth text-dark-text' : 'bg-background text-primary' %>  rounded-lg shadow-lg w-32 md:w-36 lg:w-40 hidden"
                id="reportOptions-${report._id}">
                <button class="w-full flex items-center gap-2 py-2 px-3 sm:px-4 rounded-md text-xs md:text-sm lg:text-base font-medium transition-colors duration-200
    bg-transparent text-white hover:bg-blue-700" onclick="showModal('${
      report.reason
    }', '${report.description}','${report.createdAt}','${
            report.blogId.lastModified
          }','${report._id}','${report.blogId.slug}','${new Date(
            report.createdAt
          ).toLocaleDateString()}')"><img
                      src="images/icons/reportFlagIcon.svg"
                      alt="View Report"
                      class="w-4 h-4"
                    /> 
              View</button>
              
                <button class="delete-report w-full flex items-center gap-2 py-2 px-3 sm:px-4 rounded-md text-xs md:text-sm lg:text-base font-medium transition-colors duration-200
    bg-transparent text-red-400 hover:bg-red-200" data-report-id="${report._id}">
                <img
                      src="images/icons/deleteDarkIcon.svg"
                      alt="Delete Blog"
                      class="w-4 h-4  <%=
            user.settings.theme === 'dark' ? 'invert' : ''
          %>"
                    /> 
                 Delete
                </button>
                </div>
              </td>
            </tr>
          `;
          reportsTableBody.insertAdjacentHTML("beforeend", row);
        });

        const totalPages = Math.ceil(totalReports / reportsPerPage);
        setupPagination(totalPages, page);
      } else {
            Toastify({
                text: "Failed to load reports. Please try again later.",
                duration: 4000,
                gravity: "top",
                position: "right",
                backgroundColor: "linear-gradient(to right, #e52d27, #b31217)",
                stopOnFocus: true,
                close: true,
                style: {
                  borderRadius: "10px",
                  boxShadow: "0 4px 12px rgba(0, 0, 0, 0.1)",
                  fontSize: "15px",
                  padding: "14px 18px",
                  fontFamily: "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif",
                  color: "#fff"
                }
              }).showToast();
      }
    } catch (error) {
          Toastify({
                text: "An error occurred while loading reports.",
                duration: 4000,
                gravity: "top",
                position: "right",
                backgroundColor: "linear-gradient(to right, #e52d27, #b31217)",
                stopOnFocus: true,
                close: true,
                style: {
                  borderRadius: "10px",
                  boxShadow: "0 4px 12px rgba(0, 0, 0, 0.1)",
                  fontSize: "15px",
                  padding: "14px 18px",
                  fontFamily: "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif",
                  color: "#fff"
                }
              }).showToast();
    }
  }

  function setupPagination(totalPages, currentPage) {
    const paginationElement = document.getElementById("paginationToggle");
    paginationElement.innerHTML = "";
    const maxVisiblePages = 5;
    let startPage = Math.max(currentPage - Math.floor(maxVisiblePages / 2), 1);
    let endPage = startPage + maxVisiblePages - 1;

    if (endPage > totalPages) {
      endPage = totalPages;
      startPage = Math.max(endPage - maxVisiblePages + 1, 1);
    }

    if (totalPages < 1) {
      const displayBlogsElement = document.getElementById("displayBlogs");
      const noBlogCard = `
      <div class="border-2 border border-gray-300 rounded-lg p-6 text-center                text-gray-500 font-lora font-thin min-h-[400px] flex flex-col    items-center justify-center shadow-lg">
                  <img
      src="/images/icons/blogNotFound.svg" class="" />
                <p class="text-lg">No blogs yet—be the pioneer!</p>
              </div>
            `.trim();
      displayBlogsElement.innerHTML += noBlogCard;
      return;
    }

    const prevButton = document.createElement("button");
    prevButton.innerText = "Prev";
    prevButton.classList.add(
      "px-3",
      "py-1",
      "ml-2",
      "<%= user.settings.theme === 'dark' ? 'bg-dark-sixth' : 'bg-fourth' %>",
      "rounded-md",
      "<%= user.settings.theme === 'dark' ? 'text-dark-secondary' : 'text-secondary' %>",
       "<%= user.settings.theme === 'dark' ? 'hover:bg-dark-fourth' : 'hover:bg-fifth' %>",
      "<%= user.settings.theme === 'dark' ? 'hover:text-dark-fifth' : 'hover:text-fourth' %>"
    );

    prevButton.disabled = currentPage === 1;
    prevButton.addEventListener("click", () => loadReports(currentPage - 1));
    paginationElement.appendChild(prevButton);

    for (let i = startPage; i <= endPage; i++) {
      const pageButton = document.createElement("button");
      pageButton.innerText = i;
      pageButton.classList.add(
         "px-3",
        "py-1",
        "mx-1",
        i === currentPage ? "<%= user.settings.theme === 'dark' ? 'bg-dark-fifth' : 'bg-secondary' %>" : "<%= user.settings.theme === 'dark' ? 'bg-dark-sixth' : 'bg-fourth' %>",
        i === currentPage ? "text-background" : "<%= user.settings.theme === 'dark' ? 'text-dark-secondary' : 'text-secondary' %>",
        "rounded-md"
      );
      if (i === currentPage) {
        pageButton.classList.add("<%= user.settings.theme === 'dark' ? 'bg-dark-fifth' : 'bg-secondary' %>", "text-white");
      } else {
        pageButton.classList.add("<%= user.settings.theme === 'dark' ? 'hover:bg-dark-fourth' : 'hover:bg-fifth' %>",
      "<%= user.settings.theme === 'dark' ? 'hover:text-dark-fifth' : 'hover:text-fourth' %>");
      }
      pageButton.onclick = () => {
        loadReports(i);
      };
      paginationElement.appendChild(pageButton);
    }
    const nextButton = document.createElement("button");
    nextButton.innerText = "Next";
    nextButton.classList.add(
      "px-3",
      "py-1",
      "ml-2",
      "<%= user.settings.theme === 'dark' ? 'bg-dark-sixth' : 'bg-fourth' %>",
      "rounded-md",
      "<%= user.settings.theme === 'dark' ? 'text-dark-secondary' : 'text-secondary' %>",
       "<%= user.settings.theme === 'dark' ? 'hover:bg-dark-fourth' : 'hover:bg-fifth' %>",
      "<%= user.settings.theme === 'dark' ? 'hover:text-dark-fifth' : 'hover:text-fourth' %>"
    );
    // nextButton.disabled = currentPage === totalPages;
    nextButton.addEventListener("click", () => {
      loadReports(currentPage + 1);
    });
    paginationElement.appendChild(nextButton);
    if (currentPage == 1) {
      prevButton.style.display = "none";
    }
    if (currentPage >= totalPages) {
      nextButton.style.display = "none";
    }
  }

  window.openReportMore = function openReportMore(reportId) {
    const moreOptions = document.getElementById(`reportOptions-${reportId}`);
    if (moreOptions) {
      moreOptions.classList.toggle("hidden");
    } else {
      console.error("More options element not found for report ID:", reportId);
    }
  };

  window.HideReportOptions = function HideReportOptions(slug) {
    const options = document.getElementById(`reportOptions-${slug}`);
    if (options) {
      options.classList.add("hidden");
    }
  };

  async function deleteReport(reportId) {
    const confirmDeleteButton = document.getElementById("confirmDeleteButton");
    showBtnLoader(confirmDeleteButton);
    try {
      const response = await fetch(`/api/reports/${reportId}`, {
        method: "DELETE",
        headers: {
          "Content-Type": "application/json",
        },
      });

      if (response.ok) {
       hideBtnLoader(confirmDeleteButton);
         Toastify({
                text: "Report deleted successfully.",
                duration: 4000,
                gravity: "top",
                position: "right",
                backgroundColor: "linear-gradient(to right, #28a745, #218838)",
                stopOnFocus: true,
                close: true,
                style: {
                  borderRadius: "10px",
                  boxShadow: "0 4px 12px rgba(0, 0, 0, 0.1)",
                  fontSize: "15px",
                  padding: "14px 18px",
                  fontFamily: "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif",
                  color: "#fff"
                }
              }).showToast();
        document.querySelector(`tr[data-report-id="${reportId}"]`).remove();
        closeDeleteReportModal();
        loadUserReports(1, 10);
        loadReports(1, 10);
      } else {
       throw new Error("Failed to delete report");
      }
    } catch (error) {
      hideBtnLoader(confirmDeleteButton);
       Toastify({
                text: "An error occurred while deleting the report.",
                duration: 4000,
                gravity: "top",
                position: "right",
                backgroundColor: "linear-gradient(to right, #e52d27, #b31217)",
                stopOnFocus: true,
                close: true,
                style: {
                  borderRadius: "10px",
                  boxShadow: "0 4px 12px rgba(0, 0, 0, 0.1)",
                  fontSize: "15px",
                  padding: "14px 18px",
                  fontFamily: "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif",
                  color: "#fff"
                }
              }).showToast();
    }
  }

  function truncateText(text, maxLength) {
    if (text.length > maxLength) {
      return text.substring(0, maxLength) + "...";
    }
    return text;
  }

  document.addEventListener("DOMContentLoaded", () => {
    loadReports(1, 10);

    const reportsTableBody = document.getElementById("reportsTableBody");

    reportsTableBody.addEventListener("click", function (e) {
      if (e.target.classList.contains("delete-report")) {
        const reportId = e.target.getAttribute("data-report-id");
        openDeleteReportModal(reportId);
      }
    });

    document
      .getElementById("confirmDeleteButton")
      .addEventListener("click", () => {
        if (currentReportId) {
          deleteReport(currentReportId);
        }
      });
  });
</script>
