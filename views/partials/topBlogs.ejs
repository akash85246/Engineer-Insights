<div class="relative overflow-hidden">
  <div class="relative w-full">
    <div
      class="flex overflow-x-scroll scroll-smooth transition-transform duration-300 ease-in-out"
      id="topBlogCarousel"
    ></div>

    <div
      class="absolute bottom-4 left-16 transform flex space-x-2"
      id="latestCarouselDots"
    ></div>
  </div>

  <div
    class="sm:flex justify-center items-center gap-2 md:gap-6 px-2 py-4 sm:p-4 md:p-6 w-full mt-4"
  >
    <div
      class="relative flex items-center <%= user.settings.theme === 'dark' ? ' bg-dark-sixth ' : 'bg-gray-200' %> border rounded-lg p-2 md:px-5 md:py-3 w-full sm:w-2/3 lg:w-full mb-2 sm:mb-0"
    >
      <img
        src="images/icons/searchIcon.png"
        alt="Search Icon"
        class="w-4 h-4 md:w-6 md:h-6 <%= user.settings.theme === 'dark' ? ' text-dark-text' : ' text-text' %>"
      />
      <input
        type="text"
        id="searchBlogInput"
        placeholder="Search"
        class="mx-5 bg-transparent outline-none <%= user.settings.theme === 'dark' ? ' text-dark-primary placeholder-sixth' : 'text-secondary placeholder-tertiary' %> w-full text-sm md:text-sm lg:text-base font-lora placeholder-sixth"
        oninput="fetchBlogs()"
      />
    </div>

    <div class="flex  gap-2 justify-between items-center">
      <input
        type="date"
        id="startDate"
        name="startDate"
        onchange="fetchBlogs()"
        class="rounded-md border p-2 md:px-5 md:py-3 text-sm md:text-sm lg:text-base shadow-sm transition duration-300 focus:ring-2 focus:ring-primary focus:outline-none <%= user.settings.theme === 'dark' ? 'bg-dark-sixth border-dark-fourth text-dark-primary placeholder-gray-400' : 'bg-white border-gray-300 text-gray-800 placeholder-gray-400' %>"
      />-
      <input
        type="date"
        id="endDate"
        name="endDate"
        onchange="fetchBlogs()"
        class="rounded-md border p-2 md:px-5 md:py-3 text-sm md:text-sm lg:text-base shadow-sm transition duration-300 focus:ring-2 focus:ring-primary focus:outline-none <%= user.settings.theme === 'dark' ? 'bg-dark-sixth border-dark-fourth text-dark-primary placeholder-gray-400' : 'bg-white border-gray-300 text-gray-800 placeholder-gray-400' %>"
      />
    </div>
  </div>
</div>

<script>
  let tag = "<%= tags%>" || "";
  document.addEventListener("DOMContentLoaded", function () {
    fetch(`/api/blog/search?tags=${tag}`)
      .then((response) => response.json())
      .then((data) => {
        const blogs = data.blogs.slice(0, 3);
        const carouselContainer = document.getElementById("topBlogCarousel");
        const dotsContainer = document.getElementById("latestCarouselDots");
        if (blogs.length > 0) {
          const slidesHtml = blogs
            .map(
              (blog) => `
               <div class="w-full flex-shrink-0 h-[40vh]  md:h-[50vh]">
              <div class="flex justify-center items-center bg-cover bg-center bg-origin-content w-full h-full text-white rounded-none " style="background-image: url('${
                blog.blogPhoto
              }')">
                <div class="rounded-lg shadow-lg overflow-hidden <%= user.settings.theme === 'dark' ? 'bg-dark-sixth text-dark-text' : 'bg-primary text-text' %> bg-opacity-30 h-full flex flex-col justify-end w-full p-5 py-2  md:p-10 md:py-4  lg:p-16 lg:py-10 gap-2">
                  <div class="flex">
                    <p class=" px-2 py-1 rounded-lg <%= user.settings.theme === 'dark' ? 'bg-dark-secondary text-dark-text' : 'bg-background text-text' %>  bg-opacity-30 text-white text-xxxs   md:text-xxs  lg:text-xs font-semibold font-sans uppercase">${
                      blog.tags[0]
                    }</p>
                  </div>
                  <div class="flex flex-col gap-2 mb-4 w-full sm:w-4/5  md:w-1/2">
                    <h5 class="text-lg md:text-xl  lg:text-2xl font-semibold text-white break-words">  ${truncateText(
                      blog.title,
                      60
                    )}</h5>
                    <div class="flex gap-2 w-full overflow-clip font-thin text-sixth">
                      <p class="text-xxs md:text-sm  lg:text-md  font-thin ">${new Date(
                        blog.createdAt
                      ).toLocaleDateString("en-US", {
                        day: "numeric",
                        month: "numeric",
                        year: "numeric",
                      })}</p>
                      <p class="-mt-2  flex p-0 font-sans">___</p>
                      <p class=" text-xxs md:text-sm  lg:text-md break-words w-full sm:w-2/3 md:w-full font-thin">${truncateText(
                        blog.description,
                        150
                      )}</p>
                    </div>
                    <a href="/blog/${
                      blog.slug
                    }" class="text-fifth hover:text-highlight hover:underline text-end text-xxs md:text-sm decoration-highlight font-roboto cursor-pointer">Read More </a>
                  </div>
                </div>
              </div>
            </div>
              `
            )
            .join("");

          carouselContainer.innerHTML = slidesHtml;

          const dotsHtml = blogs
            .map(
              (_, index) =>
                `<span class="w-2 h-2 bg-gray-400 rounded-full cursor-pointer dot" data-index="${index}"></span>`
            )
            .join("");
          dotsContainer.innerHTML = dotsHtml;

          // Initialize the carousel dots
          const dots = document.querySelectorAll(".dot");
          const slideWidth =
            carouselContainer.querySelector(".w-full").offsetWidth;
          const totalSlides = dots.length;

          function updateDots(index) {
            dots.forEach((dot, i) => {
              dot.classList.toggle("bg-primary", i === index);
              dot.classList.toggle("bg-gray-400", i !== index);
            });
          }

          function scrollToSlide(index) {
            const offset = index * slideWidth;
            carouselContainer.scrollTo({
              left: offset,
              behavior: "smooth",
            });
            updateDots(index);
          }

          dots.forEach((dot) => {
            dot.addEventListener("click", (e) => {
              const index = parseInt(e.target.getAttribute("data-index"));
              scrollToSlide(index);
            });
          });
          let currentIndex = 0;
          setInterval(() => {
            currentIndex = (currentIndex + 1) % totalSlides;
            scrollToSlide(currentIndex);
          }, 3000);
          updateDots(0);
        }
      })
      .catch((error) => console.error("Error fetching blogs:", error));

    function truncateText(text, maxLength) {
      if (text.length > maxLength) {
        return text.substring(0, maxLength) + "...";
      }
      return text;
    }
  });
</script>
