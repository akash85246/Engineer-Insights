<div
class="py-2 px-2 sm:px-4 md:px-6 lg:px-8 lg:py-2 <%= user.settings.theme === 'dark' ? 'bg-dark-sixth text-dark-text' : 'bg-secondary ' %> sticky top-0 grid grid-cols-2  sm:block gap-2 sm:gap-2 md:gap-4 md:min-h-screen font-lora"
>
  <div class="relative">
    <img
      src="<%= user.avatar ? user.avatar : '/images/defaultProfile.png' %>"
      alt="default profile photo"
      id="profileImage"
      class="max-w-60 w-full sm:max-w-full h-40 sm:h-52 rounded-md shadow-md object-cover"
    />

    <button
      type="button"
      class="absolute top-2 right-2 bg-white p-2 rounded-full shadow-md"
      onclick="document.getElementById('avatar').click();"
    >
      <img src="images/icons/editIcon.png" alt="Edit" class="w-6 h-6" />
    </button>

    <input
      type="file"
      name="avatar"
      id="avatar"
      class="hidden"
      onchange="handleFileChange(event)"
    />
  </div>
  <div class="w-full min-h-full h-full mt-4">
    <form class="grid grid-cols-2 sm:flex flex-col gap-1 sm:gap-4 sm:h-full">


      <div>
        <label
          for="firstname"
          class="block text-xxs sm:text-xs lg:text-sm font-medium <%= user.settings.theme === 'dark' ? ' text-dark-tertiary' : 'text-fifth' %>"
          >Email</label
        >
        <input
          type="text"
          id="email"
          name="email"
          value="<%= user.email %>"
          class="mt-1 block w-full px-1 py-2 sm:px-3 sm:py-2  rounded-md shadow-sm outline-none <%= user.settings.theme === 'dark' ? ' bg-dark-fifth border-dark-secondary text-dark-secondary' : 'border-fifth text-fifth bg-tertiary' %> border   text-xxs sm:text-xs lg:text-sm"
          readonly
        />
      </div>

      <div>
        <label
          for="firstname"
          class="block text-xxs sm:text-xs lg:text-sm font-medium <%= user.settings.theme === 'dark' ? ' text-dark-tertiary' : 'text-fifth' %>"
          >Subscription</label
        >
        <input
          type="text"
          id="suscribedType"
          name="suscribedType"
          value="<%= user.subscription %>"
          class="mt-1 block w-full  px-1 py-2 sm:px-3 sm:py-2  rounded-md shadow-sm outline-none <%= user.settings.theme === 'dark' ? ' bg-dark-fifth border-dark-secondary text-dark-secondary' : 'border-fifth text-fifth bg-tertiary' %> border    text-xxs sm:text-xs lg:text-sm"
          readonly
          required
        />
      </div>
      <% const timestamp = user.updatedAt; const dateObj = new Date(timestamp);
      const date = dateObj.toISOString().split('T')[0]; const time =
      dateObj.toISOString().split('T')[1].split('.')[0]; %>

      <div>
        <label
          for="firstname"
          class="block text-xxs sm:text-xs lg:text-sm font-medium <%= user.settings.theme === 'dark' ? ' text-dark-tertiary' : 'text-fifth' %>"
          >Last Changed Date</label
        >
        <input
          type="text"
          id="lastChangedDate"
          name="lastChangedDate"
          value="<%= date %>"
          class="mt-1 block w-full  px-1 py-2 sm:px-3 sm:py-2  rounded-md shadow-sm outline-none <%= user.settings.theme === 'dark' ? ' bg-dark-fifth border-dark-secondary text-dark-secondary' : 'border-fifth text-fifth bg-tertiary' %> border    text-xxs sm:text-xs lg:text-sm"
          readonly
          required
        />
      </div>

      <div>
        <label
          for="firstname"
          class="block text-xxs sm:text-xs lg:text-sm font-medium <%= user.settings.theme === 'dark' ? ' text-dark-tertiary' : 'text-fifth' %>"
          >Last Changed Time</label
        >
        <input
          type="text"
          id="lastChangedTime"
          name="lastChangedTime"
          value="<%= time%>"
          class="mt-1 block w-full  px-1 py-2 sm:px-3 sm:py-2  rounded-md shadow-sm outline-none <%= user.settings.theme === 'dark' ? ' bg-dark-fifth border-dark-secondary text-dark-secondary' : 'border-fifth text-fifth bg-tertiary' %> border    text-xxs sm:text-xs lg:text-sm"
          readonly
         
        />
      </div>

      <button
        class="<%= user.settings.theme === 'dark' ? ' bg-dark-fifth border-dark-secondary text-dark-secondary' : 'border-fifth text-fifth bg-tertiary' %>  border hover:bg-blue-400  font-roboto py-2 px-4 rounded w-full text-xxs sm:text-xs lg:text-sm mt-2 col-span-2 z-50"
        id="saveProfile"
        type="submit"
      >
        Save Changes
      </button>
    </form>
  </div>
</div>
<script>
  function handleFileChange(event) {
    const fileInput = event.target;
    const file = fileInput.files[0];

    if (file) {
      const reader = new FileReader();

      reader.onload = function (e) {
        const profileImage = document.getElementById("profileImage");
        profileImage.src = e.target.result;
      };

      reader.readAsDataURL(file);
    }
  }
  document.getElementById("saveProfile").onclick = function (e) {
    e.preventDefault();
    console.log("Save button clicked");

    const formData = new FormData();

    const tagsInput = document.getElementById("tag").value;

    if (!tagsInput) {
      alert("Please enter at least one tag");
      return;
    }
  
    const tagsArray = tagsInput
      .split(",")
      .map((tag) => tag.trim())
      .filter((tag) => tag.length > 0);
    console.log("tagsArray", tagsArray);

    formData.append("firstname", document.getElementById("firstname").value);
    formData.append("lastname", document.getElementById("lastname").value);
    formData.append("phone", document.getElementById("phoneNumber").value);
    formData.append("linkedin", document.getElementById("linkedin").value);
    formData.append("twitter", document.getElementById("twitter").value);
    formData.append("github", document.getElementById("github").value);
    formData.append("bio", document.getElementById("bio").value.trim());
    formData.append("tags", tagsArray.join(","));
    formData.append("country", document.getElementById("country").value);
    formData.append("state", document.getElementById("state").value);
    formData.append("username", document.getElementById("username").value);

    const avatarFile = document.getElementById("avatar").files[0];
    if (avatarFile) {
      if (avatarFile.size > 8000000) {
        alert("File size is too large. Please upload a file smaller than 8MB.");
        return;
      }
      formData.append("avatar", avatarFile);
    }

    fetch("/api/profile/edit?_method=PUT", {
      method: "POST",
      body: formData,
    })
      .then((response) => {
        if (response.ok) {
          logFormData(formData);
          window.location.href = "/profile/<%= user.slug%>";
        } else {
          console.log(response);
          return response.text().then((text) => {
            throw new Error(text || "Failed to save profile details");
          });
        }
      })
      .catch((error) => {
        logFormData(formData);
        console.log(error);
        console.log("An error occurred while saving profile details: " + error);
      });
  };

  function logFormData(formData) {
    for (let [key, value] of formData.entries()) {
      if (value instanceof File) {
        console.log(`${key}: ${value.name} (${value.size} bytes)`);
      } else {
        console.log(`${key}: ${value}`);
      }
    }
  }
</script>
