<div class="font-lora">
  <h1
    class="text-base font-lora sm:text-lg md:text-xl lg:text-2xl p-3 px-2 md:px-2 lg:px-5 font-semibold flex justify-between items-center <%= user.settings.theme === 'dark' ? 'text-dark-secondary bg-dark-background' : 'text-secondary bg-white bg-background' %> sticky top-0 z-10 mt-5"
  >
    <%= profile.username%>'s Following
    <span
      id="currentPage"
      class="text-xs sm:text-sm md:text-base lg:text-lg <%= user.settings.theme === 'dark' ? ' text-dark-tertiary' : 'text-tertiary' %>"
    ></span>
  </h1>
  <ul
    id="followings-list"
    class="p-3 px-2 md:px-2 lg:px-5 md:py-5 space-y-4"
  ></ul>
  <div id="pagination" class="flex justify-center my-2"></div>
</div>

<script>
  const followingsList = document.getElementById("followings-list");
  const paginationDiv = document.getElementById("pagination");
  let currentPage = 1;
  const limit = 10;

  async function fetchfollowings(page = 1) {
    try {
      const response = await fetch(
        `/api/user/search/following/<%= profile.slug %>?page=${page}&limit=${limit}`
      );
      const data = await response.json();
      if (data.following.length > 0) {
        renderFollowers(data.following);
        currentPage = page;
        const currentPageElement = document.getElementById("currentPage");
        currentPageElement.innerText = `Page ${data.page}`;
        renderPagination(data.page, data.totalPages);
      } else {
        followingsList.innerHTML = `<p class="text-gray-500 italic">No followings for now â€” when you find someone inspiring, hit that follow button!</p>`;
        paginationDiv.innerHTML = "";
      }
    } catch (error) {
       
      Toastify({
        text: "An error occurred while fetching followings.",
        duration: 4000,
        gravity: "top",
        position: "right",
        backgroundColor: "linear-gradient(to right, #e52d27, #b31217)",
        stopOnFocus: true,
        close: true,
        style: {
          borderRadius: "10px",
          boxShadow: "0 4px 12px rgba(0, 0, 0, 0.1)",
          fontSize: "15px",
          padding: "14px 18px",
          fontFamily: "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif",
          color: "#fff",
        },
      }).showToast();
      followingsList.innerHTML = `<p class="text-red-500">An error occurred while fetching followings.</p>`;
    }
  }

  function renderFollowers(followers) {
    followingsList.innerHTML = "";

    followingsList.innerHTML = `
              ${followers
                .map(
                  (follower) => `
                  <li class="flex justify-between items-center <%= user.settings.theme === 'dark'? 'bg-dark-sixth border-dark-fourth' : 'bg-background border-gray-200' %> shadow-md rounded-lg p-4 px-4 md:px-8 border transition-all duration-300">
                    <a href="/profile/${
                      follower.slug
                    }" class="flex items-center gap-4">
                      <img
                        src="${follower.avatar || "/images/defaultProfile.png"}"
                        alt="Profile Photo"
                        class="h-12 w-12 sm:h-14 sm:w-14 md:h-16 md:w-16  rounded-md object-cover ring-2 ring-offset-0 ring-primary                 dark:ring-dark-primary transition-transform hover:scale-105"
                      />
                      <div class="text-left">
                        <h2 class="font-semibold text-sm sm:text-base md:text-lg <%= user.settings.theme === 'dark'? 'text-dark-primary ' : 'text-primary' %> ">
                          ${follower.username}
                        </h2>
                        <p class="text-xs sm:text-sm <%= user.settings.theme === 'dark'? 'text-dark-secondary ' : 'text-secondary' %> ">
                          ${follower.firstname} ${follower.lastname}
                        </p>
                        <p class="text-[11px] sm:text-xs <%= user.settings.theme === 'dark'? 'text-dark-secondary ' : 'text-secondary' %>">
                          ${follower.email || "No email provided"}
                       </p>
                      </div>
                    </a>

                    ${
                      isAuthenticated && follower._id != user._id
                        ? `${
                            profile._id === user._id
                              ? `
                        <button
                          class="text-xs sm:text-sm font-medium <%= user.settings.theme === 'dark'? 'text-red-400 hover:text-red-500  ' : 'text-red-500 hover:text-red-700 ' %> 
           px-3 py-1 border border-transparent 
           hover:border-red-300 dark:hover:border-red-500 
           rounded-md transition duration-200"
                          onclick="removeFollowing('${follower.slug}')"
                        >
                          Unfollow
                        </button>
                      `
                              : ` <button
                          class="text-xs sm:text-sm font-medium 
           <%= user.settings.theme === 'dark'? 'text-blue-500 hover:text-blue-600 hover:border-blue-600' : 'text-blue-500 hover:text-blue-700 hover:border-blue-700' %> 
           px-3 py-1 border border-transparent 
            dark:hover:border-blue-500 
           rounded-md transition duration-200"
                          onclick="toggleUserFollowing('${follower.slug}')"
                          id="follow-button-${follower.slug}"
                        >
                          ${
                            user.following.includes(follower._id)
                              ? "Unfollow"
                              : "Follow"
                          }
                        </button>`
                          }`
                        : ""
                    }
                </li>
                `
                )
                .join("")}
          `;
  }

  async function toggleUserFollowing(profileSlug) {
    // event.preventDefault();
    console.log("Toggling follow for profile:", profileSlug);
    const followButton = document.getElementById(
      "follow-button-" + profileSlug
    );
    console.log(followButton);
    try {
      const response = await fetch(`/api/user/follow/${profileSlug}`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
      });

      if (response.ok) {
        const data = await response.json();

        followButton.innerText =
          followButton.innerText === "Follow" ? "Unfollow" : "Follow";

        const followingCount = document.getElementById("followingCount");

        followingCount.innerText = data.followingCount;
        console.log("following check", followingCount, data.followingCount);

        if (followButton.innerText === "Follow") {
          gtag("event", "follow_user", {
            event_category: "Profile",
            event_label: "User Followed",
            followed_user_id: "<%= profile._id %>",
            follower_user_id: "<%= user._id %>",
          });
        }

        Toastify({
          text: "Successfully follow/unfollow the profile.",
          duration: 4000,
          gravity: "top",
          position: "right",
          backgroundColor: "linear-gradient(to right, #4caf50, #2e7d32)",
          stopOnFocus: true,
          close: true,
          style: {
            borderRadius: "10px",
            boxShadow: "0 4px 12px rgba(0, 0, 0, 0.1)",
            fontSize: "15px",
            padding: "14px 18px",
            fontFamily: "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif",
            color: "#fff",
          },
        }).showToast();
      } else {
        throw new Error("Failed to toggle following.");
      }
    } catch (error) {
     
      Toastify({
        text: "An error occurred while toggling following.",
        duration: 4000,
        gravity: "top",
        position: "right",
        backgroundColor: "linear-gradient(to right, #e52d27, #b31217)",
        stopOnFocus: true,
        close: true,
        style: {
          borderRadius: "10px",
          boxShadow: "0 4px 12px rgba(0, 0, 0, 0.1)",
          fontSize: "15px",
          padding: "14px 18px",
          fontFamily: "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif",
          color: "#fff",
        },
      }).showToast();
    }
  }

  function renderPagination(currentPage, totalPages) {
    paginationDiv.innerHTML = "";

    const maxVisiblePages = 5;
    let startPage = Math.max(currentPage - Math.floor(maxVisiblePages / 2), 1);

    let endPage = startPage + maxVisiblePages - 1;

    if (endPage > totalPages) {
      endPage = totalPages;
      startPage = Math.max(endPage - maxVisiblePages + 1, 1);
    }

    if (totalPages < 1) {
      const followersList = document.getElementById("followers-list");
      followersList.innerHTML = `<p class="text-red-500">No followers found.</p>`;
      return;
    }

    const prevButton = document.createElement("button");
    prevButton.innerText = "Prev";
    prevButton.classList.add(
      "px-3",
      "py-1",
      "ml-2",
      "<%= user.settings.theme === 'dark' ? 'bg-dark-sixth' : 'bg-fourth' %>",
      "rounded-md",
      "<%= user.settings.theme === 'dark' ? 'text-dark-secondary' : 'text-secondary' %>",
       "<%= user.settings.theme === 'dark' ? 'hover:bg-dark-fourth' : 'hover:bg-fifth' %>",
      "<%= user.settings.theme === 'dark' ? 'hover:text-dark-fifth' : 'hover:text-fourth' %>"
    );

    prevButton.disabled = currentPage === 1;
    prevButton.addEventListener("click", () => fetchFollowers(currentPage - 1));
    paginationDiv.appendChild(prevButton);

    for (let i = startPage; i <= endPage; i++) {
      const button = document.createElement("button");
      button.classList.add(
        "px-3",
        "py-1",
        "mx-1",
        i === currentPage
          ? "<%= user.settings.theme === 'dark' ? 'bg-dark-fifth' : 'bg-secondary' %>"
          : "<%= user.settings.theme === 'dark' ? 'bg-dark-sixth' : 'bg-fourth' %>",
        i === currentPage
          ? "text-background"
          : "<%= user.settings.theme === 'dark' ? 'text-dark-secondary' : 'text-secondary' %>",
        "rounded-md"
      );

      if (i === currentPage) {
        button.classList.add(
          "<%= user.settings.theme === 'dark' ? 'bg-dark-fifth' : 'bg-secondary' %>",
          "text-white"
        );
      } else {
        button.classList.add("hover:bg-fifth", "hover:text-fourth");
      }

      button.innerText = i;
      button.addEventListener("click", () => fetchFollowers(i));

      paginationDiv.appendChild(button);
    }

    const nextButton = document.createElement("button");
    nextButton.innerText = "Next";
    nextButton.classList.add(
      "px-3",
      "py-1",
      "ml-2",
      "<%= user.settings.theme === 'dark' ? 'bg-dark-sixth' : 'bg-fourth' %>",
      "rounded-md",
      "<%= user.settings.theme === 'dark' ? 'text-dark-secondary' : 'text-secondary' %>",
       "<%= user.settings.theme === 'dark' ? 'hover:bg-dark-fourth' : 'hover:bg-fifth' %>",
      "<%= user.settings.theme === 'dark' ? 'hover:text-dark-fifth' : 'hover:text-fourth' %>"
    );
    // nextButton.disabled = currentPage === totalPages;
    nextButton.addEventListener("click", () => fetchFollowers(currentPage + 1));
    paginationDiv.appendChild(nextButton);
    if (currentPage == 1) {
      prevButton.style.display = "none";
    }
    if (currentPage >= totalPages) {
      nextButton.style.display = "none";
    }
  }

  async function removeFollowing(slug) {
    try {
      const response = await fetch(`/api/user/follow/${slug}`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
      });

      if (response.ok) {
        const data = await response.json();

        //update the following count in sidebar
        const followingCount = document.getElementById("followingCount");
        followingCount.innerText = data.followingCount;

        //update follwing count in profile detail
        if (user._id === profile._id) {
          const followingCountDetail = document.getElementById(
            "followingCountDetail"
          );
          const followingCountDetailMobile = document.getElementById(
            "followingCountDetailMobile"
          );
          if (followingCountDetailMobile) {
            followingCountDetailMobile.innerHTML = data.followingCount;
          }
          if (followingCountDetail) {
            followingCountDetail.innerHTML = data.followingCount;
          }
        }
        Toastify({
          text: "Successfully removed follower.",
          duration: 4000,
          gravity: "top",
          position: "right",
          backgroundColor: "linear-gradient(to right, #4caf50, #2e7d32)",
          stopOnFocus: true,
          close: true,
          style: {
            borderRadius: "10px",
            boxShadow: "0 4px 12px rgba(0, 0, 0, 0.1)",
            fontSize: "15px",
            padding: "14px 18px",
            fontFamily: "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif",
            color: "#fff",
          },
        }).showToast();

        fetchfollowings();
      } else {
        throw new Error("Failed to remove follower.");
      }
    } catch (error) {
      Toastify({
        text: "Failed to remove follower. Please try again later.",
        duration: 4000,
        gravity: "top",
        position: "right",
        backgroundColor: "linear-gradient(to right, #e52d27, #b31217)",
        stopOnFocus: true,
        close: true,
        style: {
          borderRadius: "10px",
          boxShadow: "0 4px 12px rgba(0, 0, 0, 0.1)",
          fontSize: "15px",
          padding: "14px 18px",
          fontFamily: "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif",
          color: "#fff",
        },
      }).showToast();
    }
  }

  function truncateText(text, maxLength) {
    if (text.length > maxLength) {
      return text.substring(0, maxLength) + "...";
    }
    return text;
  }

  fetchfollowings(1);
</script>
