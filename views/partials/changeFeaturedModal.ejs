<div
  class="fixed inset-0 <%= user.settings.theme === 'dark' ? 'bg-dark-sixth text-dark-text' : 'text-text bg-primary' %> bg-opacity-50 flex items-center justify-center hidden z-50 p-5 md:p-0 backdrop-blur-sm w-full h-full"
  id="changeFeaturedModal"
>
  <input type="text" id="modalChangeBlogInfoId" hidden />

  <div
    class="<%= user.settings.theme === 'dark' ? 'bg-dark-background text-dark-text' : 'bg-background text-text' %> backdrop-blur-sm p-4 rounded-lg w-full m-auto md:w-1/2"
  >
    <div class="flex items-center justify-between col-span-2 mb-2">
      <h2 class="text-xl font-semibold font-sans">Select Blog To Feature</h2>
      <button
        onclick="closeShowChangeFeaturedModal()"
        class="text-gray-400 hover:text-red-500 transition duration-200 text-xl"
        aria-label="Close"
      >
        &times;
      </button>
    </div>

    <div
      class="relative flex items-center <%= user.settings.theme === 'dark' ? ' bg-dark-sixth ' : 'bg-gray-200' %> border rounded-lg p-2 md:px-5 md:py-3 w-full sm:w-2/3 lg:w-full mb-2 sm:mb-0"
    >
      <img
        src="images/icons/searchIcon.png"
        alt="Search Icon"
        class="w-4 h-4 md:w-6 md:h-6 <%= user.settings.theme === 'dark' ? ' text-dark-text' : ' text-text' %>"
      />
      <input
        type="text"
        placeholder="Search a blog to select"
        class="mx-5 bg-transparent outline-none <%= user.settings.theme === 'dark' ? ' text-dark-primary placeholder-sixth' : 'text-secondary placeholder-tertiary' %> w-full text-sm md:text-sm lg:text-base font-lora placeholder-sixth"
        oninput="searchBlog(this.value)"
      />
    </div>
    <div id="top-10" class="min-h-[40vh] h-full"></div>
  </div>
</div>

<script>
  const searchList = document.getElementById("top-10");
  const user = "<%= user._id %>";

  async function searchBlog(search) {
    try {
      const response = await fetch(
        `/api/blog/search?search=${encodeURIComponent(
          search
        )}&featured=false&author=${user}`
      );
      if (!response.ok) throw new Error("Failed to search for blogs");

      const data = await response.json();
      searchList.innerHTML = "";

      if (data.blogs && data.blogs.length > 0) {
        data.blogs.forEach((blog) => {
          const blogDiv = document.createElement("div");
          blogDiv.classList.add(
            "flex",
            "items-center",
            "justify-between",
            "py-2",
            "px-4",
            "cursor-pointer"
          );

          blogDiv.innerHTML = `
            <p class="break-words max-w-[70%] md:max-w-[90%] whitespace-normal ">${blog.title}</p>
             <button  class="btn-with-loader relative  hover:bg-tertiary   hover:text-background <%= user.settings.theme === 'dark' ? 'bg-dark-fourth text-dark-text' : ' text-sixth bg-secondary' %> px-2 py-1 rounded-lg" onclick="selectBlog('${blog._id}')"> 
              <div
          class="loader-inner ball-beat hidden absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2"
        >
          <div
            class="w-2 h-2 sm:w-2.5 sm:h-2.5 md:w-3 md:h-3 bg-white rounded-full"
          ></div>
          <div
            class="w-2 h-2 sm:w-2.5 sm:h-2.5 md:w-3 md:h-3 bg-white rounded-full mx-1"
          ></div>
          <div
            class="w-2 h-2 sm:w-2.5 sm:h-2.5 md:w-3 md:h-3 bg-white rounded-full"
          ></div>
        </div>
        <span class="btn-text inline-block"> Select</span>
             
            </button>
          `;
          searchList.appendChild(blogDiv);
        });
      } else {
        searchList.innerHTML = "<p class='text-center'>No blogs found</p>";
      }
    } catch (error) {
      console.error("Error fetching blogs:", error);
      Toastify({
        text: "An error occurred while searching for blogs",
        duration: 4000,
        gravity: "top",
        position: "right",
        backgroundColor: "linear-gradient(to right, #e52d27, #b31217)",
        stopOnFocus: true,
        close: true,
        style: {
          borderRadius: "10px",
          boxShadow: "0 4px 12px rgba(0, 0, 0, 0.1)",
          fontSize: "15px",
          padding: "14px 18px",
          fontFamily: "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif",
          color: "#fff",
        },
      }).showToast();
      searchList.innerHTML = "<p class='text-center'>An error occurred</p>";
    }
  }

  async function selectBlog(currentBlogId) {
    const blogIdInput = document.getElementById("modalChangeBlogInfoId").value;
    console.log(currentBlogId, blogIdInput);

    try {
      const response = await fetch(`/api/payment/changeFeatured`, {
        method: "PATCH",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          currentBlogId: currentBlogId,
          blogId: blogIdInput,
        }),
      });

      if (!response.ok) {
        console.log(response);
        Toastify({
          text: "Failed to update the blog feature",
          duration: 4000,
          gravity: "top",
          position: "right",
          backgroundColor: "linear-gradient(to right, #e52d27, #b31217)",
          stopOnFocus: true,
          close: true,
          style: {
            borderRadius: "10px",
            boxShadow: "0 4px 12px rgba(0, 0, 0, 0.1)",
            fontSize: "15px",
            padding: "14px 18px",
            fontFamily: "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif",
            color: "#fff",
          },
        }).showToast();
        return;
      }

      const result = await response.json();
      // alert(`Blog updated successfully: ${result.message}`);
      Toastify({
        text: "Blog updated successfully!",
        duration: 4000,
        gravity: "top",
        position: "right",
        backgroundColor: "linear-gradient(to right, #00c6ff, #0072ff)", // Aqua to vibrant blue
        stopOnFocus: true,
        close: true,
        style: {
          borderRadius: "10px",
          boxShadow: "0 4px 12px rgba(0, 0, 0, 0.1)",
          fontSize: "15px",
          padding: "14px 18px",
          fontFamily: "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif",
          color: "#fff",
        },
      }).showToast();
      window.location.reload();
    } catch (error) {
      Toastify({
        text: "Failed to update the blog feature",
        duration: 4000,
        gravity: "top",
        position: "right",
        backgroundColor: "linear-gradient(to right, #e52d27, #b31217)",
        stopOnFocus: true,
        close: true,
        style: {
          borderRadius: "10px",
          boxShadow: "0 4px 12px rgba(0, 0, 0, 0.1)",
          fontSize: "15px",
          padding: "14px 18px",
          fontFamily: "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif",
          color: "#fff",
        },
      }).showToast();
    }
  }

  function showBtnLoader(buttonEl) {
  const loader = buttonEl.querySelector('.loader-inner');
  const text = buttonEl.querySelector('.btn-text');
  if (loader && text) {
    loader.classList.remove('hidden');
    text.classList.add('invisible'); // keeps layout
    buttonEl.disabled = true;
  }

  // 🔒 Disable all other buttons
  document.querySelectorAll('.btn-with-loader').forEach((btn) => {
    if (btn !== buttonEl) {
      btn.disabled = true;
      btn.classList.add('opacity-60', 'cursor-not-allowed');
    }
  });
}

function hideBtnLoader(buttonEl) {
  const loader = buttonEl.querySelector('.loader-inner');
  const text = buttonEl.querySelector('.btn-text');
  if (loader && text) {
    loader.classList.add('hidden');
    text.classList.remove('invisible');
    buttonEl.disabled = false;
  }

  // ♻️ Re-enable all buttons
  document.querySelectorAll('.btn-with-loader').forEach((btn) => {
    btn.disabled = false;
    btn.classList.remove('opacity-60', 'cursor-not-allowed');
  });
}
</script>
