<div
  id="category-bar"
  class="py-4 px-2 md:p-4 md:px-8 sticky top-0 <%= user.settings.theme === 'dark' ? ' bg-dark-background text-dark-primary' : 'bg-background text-text' %> z-30  pt-0"
>
  <ul
    class="flex gap-2 lg:gap-4 overflow-y-hidden overflow-x-scroll w-full text-xs md:text-sm lg:text-base"
  >
    <li
      class="text-highlight underline cursor-pointer"
      id="all"
      onclick="filterByCategory('')"
    >
      All
    </li>
    <li
      class="<%= user.settings.theme === 'dark' ? ' text-dark-secondary' : 'text-primary' %> hover:text-highlight cursor-pointer"
      id="tech"
      onclick="filterByCategory('tech')"
    >
      Tech
    </li>
    <li
      class="<%= user.settings.theme === 'dark' ? ' text-dark-secondary' : 'text-primary' %> hover:text-highlight cursor-pointer"
      id="health"
      onclick="filterByCategory('health')"
    >
      Health
    </li>
    <li
      class="<%= user.settings.theme === 'dark' ? ' text-dark-secondary' : 'text-primary' %> hover:text-highlight cursor-pointer"
      id="travel"
      onclick="filterByCategory('travel')"
    >
      Travel
    </li>
    <li
      class="<%= user.settings.theme === 'dark' ? ' text-dark-secondary' : 'text-primary' %> hover:text-highlight cursor-pointer"
      id="lifestyle"
      onclick="filterByCategory('lifestyle')"
    >
      Lifestyle
    </li>
    <li
      class="<%= user.settings.theme === 'dark' ? ' text-dark-secondary' : 'text-primary' %> hover:text-highlight cursor-pointer"
      id="education"
      onclick="filterByCategory('education')"
    >
      Education
    </li>
    <li
      class="<%= user.settings.theme === 'dark' ? ' text-dark-secondary' : 'text-primary' %> hover:text-highlight cursor-pointer"
      id="business"
      onclick="filterByCategory('business')"
    >
      Business
    </li>
    <li
      class="<%= user.settings.theme === 'dark' ? ' text-dark-secondary' : 'text-primary' %> hover:text-highlight cursor-pointer"
      id="finance"
      onclick="filterByCategory('finance')"
    >
      Finance
    </li>
    <li
      class="<%= user.settings.theme === 'dark' ? ' text-dark-secondary' : 'text-primary' %> hover:text-highlight cursor-pointer"
      id="science"
      onclick="filterByCategory('science')"
    >
      Science
    </li>
    <li
      class="<%= user.settings.theme === 'dark' ? ' text-dark-secondary' : 'text-primary' %> hover:text-highlight cursor-pointer"
      id="entertainment"
      onclick="filterByCategory('entertainment')"
    >
      Entertainment
    </li>
    <li
      class="<%= user.settings.theme === 'dark' ? ' text-dark-secondary' : 'text-primary' %> hover:text-highlight cursor-pointer"
      id="sports"
      onclick="filterByCategory('sports')"
    >
      Sports
    </li>
    <li
      class="<%= user.settings.theme === 'dark' ? ' text-dark-secondary' : 'text-primary' %> hover:text-highlight cursor-pointer"
      id="food"
      onclick="filterByCategory('food')"
    >
      Food
    </li>
    <li
      class="<%= user.settings.theme === 'dark' ? ' text-dark-secondary' : 'text-primary' %> hover:text-highlight cursor-pointer"
      id="fashion"
      onclick="filterByCategory('fashion')"
    >
      Fashion
    </li>
    <li
      class="<%= user.settings.theme === 'dark' ? ' text-dark-secondary' : 'text-primary' %> hover:text-highlight cursor-pointer"
      id="art"
      onclick="filterByCategory('art')"
    >
      Art
    </li>
    <li
      class="<%= user.settings.theme === 'dark' ? ' text-dark-secondary' : 'text-primary' %> hover:text-highlight cursor-pointer"
      id="music"
      onclick="filterByCategory('music')"
    >
      Music
    </li>
    <li
      class="<%= user.settings.theme === 'dark' ? ' text-dark-secondary' : 'text-primary' %> hover:text-highlight cursor-pointer"
      id="movies"
      onclick="filterByCategory('movies')"
    >
      Movies
    </li>
    <li
      class="<%= user.settings.theme === 'dark' ? ' text-dark-secondary' : 'text-primary' %> hover:text-highlight cursor-pointer"
      id="books"
      onclick="filterByCategory('books')"
    >
      Books
    </li>
    <li
      class="<%= user.settings.theme === 'dark' ? ' text-dark-secondary' : 'text-primary' %> hover:text-highlight cursor-pointer"
      id="gaming"
      onclick="filterByCategory('gaming')"
    >
      Gaming
    </li>
    <li
      class="<%= user.settings.theme === 'dark' ? ' text-dark-secondary' : 'text-primary' %> hover:text-highlight cursor-pointer"
      id="politics"
      onclick="filterByCategory('politics')"
    >
      Politics
    </li>
    <li
      class="<%= user.settings.theme === 'dark' ? ' text-dark-secondary' : 'text-primary' %> hover:text-highlight cursor-pointer"
      id="history"
      onclick="filterByCategory('history')"
    >
      History
    </li>
    <li
      class="<%= user.settings.theme === 'dark' ? ' text-dark-secondary' : 'text-primary' %> hover:text-highlight cursor-pointer"
      id="law"
      onclick="filterByCategory('law')"
    >
      Law
    </li>
    <li
      class="<%= user.settings.theme === 'dark' ? ' text-dark-secondary' : 'text-primary' %> hover:text-highlight cursor-pointer"
      id="healthcare"
      onclick="filterByCategory('healthcare')"
    >
      Healthcare
    </li>
    <li
      class="<%= user.settings.theme === 'dark' ? ' text-dark-secondary' : 'text-primary' %> hover:text-highlight cursor-pointer"
      id="environment"
      onclick="filterByCategory('environment')"
    >
      Environment
    </li>
    <li
      class="<%= user.settings.theme === 'dark' ? ' text-dark-secondary' : 'text-primary' %> hover:text-highlight cursor-pointer"
      id="automotive"
      onclick="filterByCategory('automotive')"
    >
      Automotive
    </li>
    <li
      class="<%= user.settings.theme === 'dark' ? ' text-dark-secondary' : 'text-primary' %> hover:text-highlight cursor-pointer whitespace-nowrap"
      id="real"
      onclick="filterByCategory('real estate')"
    >
      Real Estate
    </li>
    <li
      class="<%= user.settings.theme === 'dark' ? ' text-dark-secondary' : 'text-primary' %> hover:text-highlight cursor-pointer"
      id="parenting"
      onclick="filterByCategory('parenting')"
    >
      Parenting
    </li>
    <li
      class="<%= user.settings.theme === 'dark' ? ' text-dark-secondary' : 'text-primary' %> hover:text-highlight cursor-pointer whitespace-nowrap"
      id="self"
      onclick="filterByCategory('self improvement')"
    >
      Self Improvement
    </li>
    <li
      class="<%= user.settings.theme === 'dark' ? ' text-dark-secondary' : 'text-primary' %> hover:text-highlight cursor-pointer"
      id="spirituality"
      onclick="filterByCategory('spirituality')"
    >
      Spirituality
    </li>
    <li
      class="<%= user.settings.theme === 'dark' ? ' text-dark-secondary' : 'text-primary' %> hover:text-highlight cursor-pointer whitespace-nowrap"
      id="current"
      onclick="filterByCategory('current events')"
    >
      Current Events
    </li>
    <li
      class="<%= user.settings.theme === 'dark' ? ' text-dark-secondary' : 'text-primary' %> hover:text-highlight cursor-pointer"
      id="others"
      onclick="filterByCategory('others')"
    >
      Others
    </li>
  </ul>
</div>

<div
  class="p-2 md:p-8 grid grid-cols-2 sm:grid-cols-3 md:grid-cols-3 lg:grid-cols-4 gap-2 md:gap-4"
  id="displayBlogs"
></div>

<div
  id="pagination"
  class="flex justify-center items-center my-2"
></div>

<%- include("../partials/deleteBlogModal.ejs") %>

<script>
  let currentCategory = "";
  let searchQuery = "";
  let startDate = "";
  let endDate = "";
  let tags = "<%= tags%>" || "";
  let page = 1;
  let limit = 12;
  let currentPage = 1;
  async function fetchBlogs(page) {
    searchQuery = document.getElementById("searchBlogInput").value;
    startDate = document.getElementById("startDate").value;
    endDate = document.getElementById("endDate").value;
  
    const apiURL = `/api/blog/search?category=${currentCategory}&tags=${tags}&search=${searchQuery}&startDate=${startDate}&endDate=${endDate}&page=${page} &limit=${limit}`;

    try {
      const response = await fetch(apiURL);
      const data = await response.json();
      displayBlogs(data.blogs);
     
       currentPage = page;
      setupPagination(data.pagination.totalPages, currentPage);
    } catch (error) {
      console.error("Error fetching blogs:", error);
    }
  }

  function filterByCategory(category) {
    currentCategory = category;
    const previousSelected = document.querySelectorAll(
      ".text-highlight, .underline"
    );
    previousSelected.forEach((element) => {
      element.classList.remove("text-highlight", "underline");
    });
    
    if (category === "") {
      const tagAll = document.getElementById("all");
      tagAll.classList.add("text-highlight", "underline");
      tagAll.classList.remove("text-dark-secondary", "text-primary");
      return fetchBlogs();
    }
    

    const categorySelected = document.getElementById(currentCategory);

    if (categorySelected) {
      categorySelected.classList.add("text-highlight", "underline");
      categorySelected.classList.remove("text-dark-secondary", "text-primary");
    }
    fetchBlogs();
  }

  function displayBlogs(blogs) {
    const displayBlogsElement = document.getElementById("displayBlogs");
    displayBlogsElement.innerHTML = "";


    blogs.forEach((blog) => {
                let isSubAuthor = false;
                let isAuthor = false;
                let userId = null;
                let isLiked = false;
                let isBookmarked = false;
                let isArchived = false;
          
                const isAuthenticated = "<%- isAuthenticated %>" == "true";
          
                if (isAuthenticated) {
            
                  const userId = "<%- user._id %>"; 
                  const user = <%- JSON.stringify(user) %>;
                  isAuthor = userId.toString() == blog.author._id;
                  isSubAuthor = blog.subauthors.some(
                    (subauthorId) => subauthorId.toString() === userId.toString());

                  if (blog.likes && blog.likes.length > 0) {
                    isLiked = blog.likes.some((like) => like.toString()       ===    userId.toString());
            
                  }

                  if(user.savedBlogs && user.savedBlogs.length >0){
                    isBookmarked = user.savedBlogs.some((save) => save.       toString() === blog._id.toString());
                  }

                  isArchived = blog.status === "archived";
                }

      const blogCard = `
         <div class="font-lora relative rounded-md <%= user.settings.theme === 'dark' ? 'bg-dark-sixth shadow-white-lg' : 'bg-background shadow-lg' %> flex flex-col justify-between" onmouseleave="hideBlogOptions('${blog.slug}')">
                    <div class=" bg-cover bg-center bg-origin-content rounded-md bg-blend-darken"  style="background-image: url('${
                      blog.blogPhoto
                    }')">
                    <div class="<%= user.settings.theme === 'dark' ? 'bg-black bg-opacity-30' : '' %> w-full flex justify-end">
                    <div class="flex h-auto mb-32 sm:mb-52  md:mb-64 mt-2 mr-2   md:mt-5 md:mr-5">
                      <p class=" px-2 py-1 rounded-lg  bg-opacity-30 text-white text-xxs sm:text-xs md:text-xxs lg:text-xs  font-semibold font-sans uppercase <%= user.settings.theme === 'dark' ? 'bg-dark-fourth' : 'bg-background text-background' %>">${truncateText(
                        blog.tags[0],
                        15
                      )}</p>
                    </div>
                    </div>
                 
                </div>
                <div class="flex flex-col gap-2 pt-4 px-2 pb-2">
                   <p class="text-xs sm:text-xxs md:text-xs lg:text-sm  <%= user.settings.theme === 'dark' ? ' text-dark-secondary' : 'text-secondary' %>  font-thin">${new Date(
                     blog.createdAt
                   ).toLocaleDateString("en-US", {
                     day: "numeric",
                     month: "numeric",
                     year: "numeric",
                   })}</p>
                    <h5 class="text-sm sm:text-sm md:text-base lg:text-lg font-semibold <%= user.settings.theme === 'dark' ? ' text-dark-text' : 'text-primary' %> break-words whitespace-normal ">
                      ${truncateText(blog.title, 50)}
                    </h5>
                    <p class="text-xs sm:text-xxs md:text-xs lg:text-sm  <%= user.settings.theme === 'dark' ? ' text-dark-secondary' : 'text-secondary' %> break-words whitespace-normal font-thin">
                      ${truncateText(blog.description, 100)}
                      <span>
                      <a href="/blog/${
                        blog.slug
                      }" class=" <%= user.settings.theme === 'dark' ? ' text-dark-secondary' : 'text-secondary' %> hover:text-highlight    font-roboto text-center  text-xs sm:text-xxs md:text-xs lg:text-sm  font-medium">read more</a>
                        
                      </span>
                    </p>

                  </div>
                  
                  
                  <div class="justify-between items-center flex text-sm sm:text-sm md:text-base lg:text-base p-2 border-t-2 <%= user.settings.theme === 'dark' ? 'border-dark-fifth' : 'border-sixth' %> ">

                          <a class="flex items-center gap-2" href="/profile/${
                            blog.author.slug
                          }" >
                    <img src="${
                      blog.author.avatar
                    }" alt="author" class="w-8 h-8 lg:w-10 lg:h-10 rounded-md" />
                    <div class="">
                    <p class=" font-thin <%= user.settings.theme === 'dark' ? 'text-dark-secondary' : 'text-primary' %> ">
                      ${blog.author.username}
                    </p>
                    <p class="text-xs sm:text-xs md:text-sm lg:text-sm font-thin <%= user.settings.theme === 'dark' ? ' text-dark-primary' : 'text-secondary' %>">
                      ${blog.author.firstname} ${blog.author.lastname}
                    </p>
                </div>
                </a>
                <div class="relative">
                             ${(isAuthenticated)?
                  `<button onclick='openBlogMore(${isSubAuthor}, ${isAuthor}, "${
                        blog.slug
                    }")'>
                      <img src="images/icons/verticalMoreIcon.svg" alt="More"
                        class="w-6 h-6 sm:w-5 sm:h-5 md:w-6 md:h-6 lg:w-7 lg:h-7  <%= user.settings.theme === 'dark' ? '' : 'invert' %>">
                    </button>`:""}

                            <div  class="absolute bottom-0 right-0 flex flex-col gap-2 rounded-md p-2 shadow-md z-50
                      <%= user.settings.theme === 'dark' ? 'bg-dark-fifth text-dark-text' : 'bg-background text-primary' %> min-w-[120px] hidden shadow-md"
                      id="blogMoreOptions-${blog.slug}">

                       

                  ${
                    isSubAuthor || isAuthor
                      ? `
                      
                         ${
                           isAuthor
                             ? `
                             <button onclick="toggleArchiveBlog('${blog.slug}','${isArchived}')"   class="flex items-center justify-start gap-2 px-3 py-2 rounded-md text-sm transition-all
                             <%= user.settings.theme === 'dark'
                              ? 'hover:bg-red-600 text-dark-primary'
                              : 'hover:bg-red-200 text-primary' %>">
                             <img src="${isArchived?"images/icons/unarchiveIcon.svg":"images/icons/archiveIcon.svg"}" alt="Archive Blog"
                       class="w-4 h-4 transition-transform duration-200 group-hover:scale-110 <%= user.settings.theme === 'dark' ? 'invert' : '' %> " id="archiveIcon-${blog.slug}">
                             <span id="archiveText-${blog.slug}">${isArchived ? "Unarchive" : "Archive"}</span>
                             </button>

                             <button onclick="openDeleteModal('${blog.slug}')"  class="flex items-center justify-start gap-2 px-3 py-2 rounded-md text-sm transition-all
                            <%= user.settings.theme === 'dark'
                              ? 'hover:bg-red-600 text-dark-primary'
                              : 'hover:bg-red-200 text-primary' %>">
                              <img src="images/icons/deleteDarkIcon.svg" alt="Delete Blog"
                              class="w-4 h-4 transition-transform duration-200 group-hover:scale-110 <%= user.settings.theme === 'dark' ? 'invert' : '' %> ">
                              <span>Delete</span>
                              </button>
                             `
                             : ""
                         }
                         <a href="/blog/edit/${
                           blog.slug
                         }"  class="flex items-center justify-start gap-2 px-3 py-2 rounded-md text-sm transition-all
                          <%= user.settings.theme === 'dark'
                            ? 'hover:bg-blue-600 text-dark-primary'
                            : 'hover:bg-blue-200 text-primary' %>"> <img src="images/icons/editDarkIcon.svg" alt="Edit Blog"
                        class="w-4 h-4 transition-transform duration-200 group-hover:scale-110 <%= user.settings.theme === 'dark' ? 'invert' : '' %>"> 
                         <span>Edit</span>
                         </a>
                      
                    `
                      : ` <button onclick="likeBlog('${
                        blog.slug
                      }',${isLiked})" class="flex items-center justify-start gap-2 px-3 py-2 rounded-md text-sm transition-all
                        <%= user.settings.theme === 'dark'
                          ? 'hover:bg-red-600 text-dark-primary'
                          : 'hover:bg-red-200 text-primary' %>">
                              <img src="${
                                isLiked
                                  ? "images/icons/likeIcon.svg"
                                  : "images/icons/unlikeIcon.svg"
                              }" id="likeIcon-${blog.slug}" alt="Like Blog"
                        class="w-4 h-4 transition-transform duration-200 group-hover:scale-110  ">
                              <span id="likeText-${blog.slug}">${
                              isLiked ? "Unlike" : "Like"
                            }</span>
                        </button>

                        <button onclick="toggleSaveBlog('${blog.slug}',${isBookmarked})"   class="flex items-center justify-start gap-2 px-3 py-2 rounded-md text-sm transition-all
                          <%= user.settings.theme === 'dark'
                          ? 'hover:bg-red-600 text-dark-primary'
                          : 'hover:bg-red-200 text-primary' %>">
                              <img src="${
                                isBookmarked
                                  ? "images/icons/unbookMark.svg"
                                  : "images/icons/bookMark.svg" } " alt="Unsave Blog"
                        class="w-4 h-4 transition-transform duration-200 group-hover:scale-110 " id="saveIcon-${blog.slug}">
                              <span id="saveText-${blog.slug}">${isBookmarked?`Unsave`:`Save`}</span>
                        </button>`
                  }
                </div>
                </div>
                </div>
        `
      displayBlogsElement.innerHTML += blogCard;
    });
  }

  function setupPagination(totalPages, currentPage) {
    const paginationElement = document.getElementById("pagination");
    paginationElement.innerHTML = "";
    const maxVisiblePages = 5;
    let startPage = Math.max(currentPage - Math.floor(maxVisiblePages / 2), 1);
    let endPage = startPage + maxVisiblePages - 1;

    if (endPage > totalPages) {
      endPage = totalPages;
      startPage = Math.max(endPage - maxVisiblePages + 1, 1);
    }

    if (totalPages < 1) {
      const displayBlogsElement = document.getElementById("displayBlogs");
      const noBlogCard = `
      <div class="border-2 border border-gray-300 rounded-lg p-6 text-center <%= user.settings.theme === 'dark' ? ' text-dark-primary' : ' text-primary' %>  font-lora font-thin min-h-[250px] md:min-h-[300px] lg:min-h-[400px] flex flex-col   items-center justify-center shadow-lg">
                  <img
      src="/images/icons/blogNotFound.svg" />
                <p class="text-lg">No blogs yet—be the pioneer!</p>
              </div>
            `.trim();
    displayBlogsElement.innerHTML += noBlogCard;
      return;
    }

    const prevButton = document.createElement("button");
    prevButton.innerText = "Prev";
    prevButton.classList.add(
      "px-3",
      "py-1",
      "ml-2",
      "<%= user.settings.theme === 'dark' ? 'bg-dark-sixth' : 'bg-fourth' %>",
      "rounded-md",
      "<%= user.settings.theme === 'dark' ? 'text-dark-secondary' : 'text-secondary' %>",
       "<%= user.settings.theme === 'dark' ? 'hover:bg-dark-fourth' : 'hover:bg-fifth' %>",
      "<%= user.settings.theme === 'dark' ? 'hover:text-dark-fifth' : 'hover:text-fourth' %>"
    );

    prevButton.disabled = currentPage === 1;
    prevButton.addEventListener("click", () => fetchBlogs(currentPage - 1));
    paginationElement.appendChild(prevButton);

    for (let i = startPage; i <= endPage; i++) {
      const pageButton = document.createElement("button");
      pageButton.innerText = i;
      pageButton.classList.add(
       "px-3",
        "py-1",
        "mx-1",
        i === currentPage ? "<%= user.settings.theme === 'dark' ? 'bg-dark-fifth' : 'bg-secondary' %>" : "<%= user.settings.theme === 'dark' ? 'bg-dark-sixth' : 'bg-fourth' %>",
        i === currentPage ? "text-background" : "<%= user.settings.theme === 'dark' ? 'text-dark-secondary' : 'text-secondary' %>",
        "rounded-md"
      );
      if (i === currentPage) {
        pageButton.classList.add("<%= user.settings.theme === 'dark' ? 'bg-dark-fifth' : 'bg-secondary' %>", "text-white");
      } else {
        pageButton.classList.add("hover:bg-fifth", "hover:text-fourth");
      }
      pageButton.onclick = () => fetchBlogs(i);
      paginationElement.appendChild(pageButton);
    }
    const nextButton = document.createElement("button");
    nextButton.innerText = "Next";
    nextButton.classList.add(
      "px-3",
      "py-1",
      "ml-2",
      "<%= user.settings.theme === 'dark' ? 'bg-dark-sixth' : 'bg-fourth' %>",
      "rounded-md",
      "<%= user.settings.theme === 'dark' ? 'text-dark-secondary' : 'text-secondary' %>",
       "<%= user.settings.theme === 'dark' ? 'hover:bg-dark-fourth' : 'hover:bg-fifth' %>",
      "<%= user.settings.theme === 'dark' ? 'hover:text-dark-fifth' : 'hover:text-fourth' %>"
    );
    // nextButton.disabled = currentPage === totalPages;
    nextButton.addEventListener("click", () => {

      fetchBlogs(currentPage + 1);
    });
    paginationElement.appendChild(nextButton);

    if (currentPage == 1) {
      prevButton.style.display = "none";
    }
    if (currentPage >= totalPages) {
      nextButton.style.display = "none";
    }
   
  }

  function truncateText(text, maxLength) {
    if (text.length > maxLength) {
      return text.substring(0, maxLength) + "...";
    }
    return text;
  }

   window.openBlogMore = function openBlogMore(isSubAuthor, isAuthor, slug) {
      const blogMoreOptions = document.getElementById(
        "blogMoreOptions-" + slug
      );
      blogMoreOptions.classList.toggle("hidden");
    };



    window.hideBlogOptions = function hideBlogOptions(slug) {
      const options = document.getElementById(`blogMoreOptions-${slug}`);
      if (options) {
        options.classList.add("hidden");
      }
    };

     window.likeBlog = async function likeBlog(slug, isLiked) {
      const likeImg = document.getElementById("likeIcon-" + slug);
      const likeText = document.getElementById("likeText-" + slug);
      isLiked = likeText.innerText === "Unlike";
      
      if (isLiked) {
        likeImg.src = "images/icons/unlikeIcon.svg";
        likeText.innerText = "Like";
        likeImg.alt = "Unlike icon";
        
      } else {
        likeImg.src = "images/icons/likeIcon.svg";
        likeText.innerText = "Unlike";
        likeImg.alt = "Like icon";
        
      }
      try {
        const response = await fetch(`/api/blog/like/${slug}`, {
          method: "PUT",
          headers: { "Content-Type": "application/json" },
        });

        if (!response.ok) {
          likeImg.src = isLiked
            ? "images/icons/likeIcon.svg"
            : "images/icons/unlikeIcon.svg";
          likeImg.alt = isLiked ? "Like icon" : "Unlike icon";
          likeText.innerText = isLiked ? "Like" : "Unlike";

          throw new Error("Failed to like/unlike the blog");
        }

        const result = await response.json();
       
        if (!result.liked) {
          likeImg.src = "images/icons/unlikeIcon.svg";
          likeImg.alt = "Unlike icon";
          likeText.innerText = "Like";
           Toastify({
              text: "Blog unliked successfully!",
              duration: 4000,
              gravity: "top",
              position: "right",
              backgroundColor: "linear-gradient(to right, #ff416c, #ff4b2b)", 
              stopOnFocus: true,
              close: true,
              style: {
                borderRadius: "10px",
                boxShadow: "0 4px 12px rgba(0, 0, 0, 0.1)",
                fontSize: "15px",
                padding: "14px 18px",
                fontFamily: "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif",
                color: "#fff" }
            }).showToast();
          
        } else {
          likeImg.src = "images/icons/likeIcon.svg";
          likeImg.alt = "Like icon";
          likeText.innerText = "Unlike";
          Toastify({
              text: "Blog liked successfully!",
              duration: 4000,
              gravity: "top",
              position: "right",
              backgroundColor: "linear-gradient(to right, #ff5f6d, #ffc371)", 
              stopOnFocus: true,
              close: true,
              style: {
                borderRadius: "10px",
                boxShadow: "0 4px 12px rgba(0, 0, 0, 0.1)",
                fontSize: "15px",
                padding: "14px 18px",
                fontFamily: "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif",
                color: "#fff"
              }
            }).showToast();
        }
      } catch (error) {
        likeImg.src = isLiked
          ? "images/icons/likeIcon.svg"
          : "images/icons/unlikeIcon.svg";
        likeImg.alt = isLiked ? "Like icon" : "Unlike icon";
        likeText.innerText = isLiked ? "Like" : "Unlike";
        Toastify({
                  text: "Please try again later.",
                  duration: 4000,
                  gravity: "top",
                  position: "right",
                  backgroundColor: "linear-gradient(to right, #e52d27, #b31217)",
                  stopOnFocus: true,
                  close: true,
                  style: {
                    borderRadius: "10px",
                    boxShadow: "0 4px 12px rgba(0, 0, 0, 0.1)",
                    fontSize: "15px",
                    padding: "14px 18px",
                    fontFamily: "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif",
                    color: "#fff"
                  }
                }).showToast();

      }
    };
    
    window.toggleSaveBlog = async function toggleSaveBlog(slug,isBookmarked) {
      try {
        const saveText = document.getElementById(`saveText-${slug}`);
        const saveIcon = document.getElementById(`saveIcon-${slug}`);

        if(isBookmarked) {
          saveText.innerText = "Save";
          saveIcon.src = "images/icons/bookMark.svg";
        } else {
          saveText.innerText = "Unsave";
          saveIcon.src = "images/icons/unbookMark.svg";
        }

        const response = await fetch(`/api/blog/saveBlog/${slug}`, {
            method: "PUT",
            headers: { "Content-Type": "application/json" },
          });

            if (!response.ok) {

              saveText.innerText = isBookmarked ? "Unsave" : "Save";
              saveIcon.src = isBookmarked
                ? "images/icons/bookMark.svg"
                : "images/icons/unbookMark.svg";

              throw new Error("Failed to archive the blog");
            }

            const result = await response.json();

            if(!result.saved) {
                saveText.innerText = "Save";
                saveIcon.src = "images/icons/bookMark.svg";
                  Toastify({
                text: "Blog unsaved successfully!",
                duration: 4000,
                gravity: "top",
                position: "right",
                backgroundColor: "linear-gradient(to right, #ff416c, #ff4b2b)", 
                stopOnFocus: true,
                close: true,
                style: {
                  borderRadius: "10px",
                  boxShadow: "0 4px 12px rgba(0, 0, 0, 0.1)",
                  fontSize: "15px",
                  padding: "14px 18px",
                  fontFamily: "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif",
                  color: "#fff"
                }
              }).showToast();
              } else {
                saveText.innerText = "Unsave";
                saveIcon.src = "images/icons/unbookMark.svg";
                 Toastify({
                text: "Blog saved successfully!",
                duration: 4000,
                gravity: "top",
                position: "right",
                backgroundColor: "linear-gradient(to right, #00c6ff, #0072ff)", // Aqua to vibrant blue
                stopOnFocus: true,
                close: true,
                style: {
                  borderRadius: "10px",
                  boxShadow: "0 4px 12px rgba(0, 0, 0, 0.1)",
                  fontSize: "15px",
                  padding: "14px 18px",
                  fontFamily: "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif",
                  color: "#fff"
                }
              }).showToast();
              }
            
      } catch (error) {
       Toastify({
              text: "Failed to save/unsave the blog. Please try again later.",
              duration: 4000,
              gravity: "top",
              position: "right",
              backgroundColor: "linear-gradient(to right, #e52d27, #b31217)",
              stopOnFocus: true,
              close: true,
              style: {
                borderRadius: "10px",
                boxShadow: "0 4px 12px rgba(0, 0, 0, 0.1)",
                fontSize: "15px",
                padding: "14px 18px",
                fontFamily: "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif",
                color: "#fff"
              }
            }).showToast();
      }
    };

     window.toggleArchiveBlog = async function toggleArchiveBlog(slug,isArchived) {
      const archiveText = document.getElementById(`archiveText-${slug}`);
      const archiveIcon = document.getElementById(`archiveIcon-${slug}`);

      if (isArchived) {
        archiveText.innerText = "Archive";
        archiveIcon.src = "images/icons/archiveIcon.svg";
      } else {
        archiveText.innerText = "Unarchive";
        archiveIcon.src = "images/icons/unarchiveIcon.svg";
      }

      try {
        const response = await fetch(`/api/blog/archive/${slug}`, {
            method: "PUT",
            headers: { "Content-Type": "application/json" },
          });

            if (!response.ok) {
              archiveText.innerText = isArchived ? "Unarchive" : "Archive";
              archiveIcon.src = isArchived
                ? "images/icons/unarchiveIcon.svg"
                : "images/icons/archiveIcon.svg";
              throw new Error("Failed to archive the blog");
            }

            const result = await response.json();
            if(!result.archived) {
              archiveText.innerText = "Archive";
              archiveIcon.src = "images/icons/archiveIcon.svg";
               Toastify({
                  text: "Blog published successfully!",
                  duration: 4000,
                  gravity: "top",
                  position: "right",
                  backgroundColor: "linear-gradient(to right, #ff416c, #ff4b2b)", // Elegant reddish gradient
                  stopOnFocus: true,
                  close: true,
                  style: {
                    borderRadius: "10px",
                    boxShadow: "0 4px 12px rgba(0, 0, 0, 0.1)",
                    fontSize: "15px",
                    padding: "14px 18px",
                    fontFamily: "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif",
                    color: "#fff"
                  }
                }).showToast();
            } else {
              archiveText.innerText = "Unarchive";
              archiveIcon.src = "images/icons/unarchiveIcon.svg";
              Toastify({
                  text: "Blog archived successfully!",
                  duration: 4000,
                  gravity: "top",
                  position: "right",
                  backgroundColor: "linear-gradient(to right, #1e3c72, #2a5298)", // Elegant bluish gradient
                  stopOnFocus: true,
                  close: true,
                  style: {
                    borderRadius: "10px",
                    boxShadow: "0 4px 12px rgba(0, 0, 0, 0.1)",
                    fontSize: "15px",
                    padding: "14px 18px",
                    fontFamily: "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif",
                    color: "#fff"
                  }
                }).showToast();
              fetchBlogs(1);
            }
      } catch (error) {
        Toastify({
                text: "Failed to archive the blog. Please try again later.",
                duration: 4000,
                gravity: "top",
                position: "right",
                backgroundColor: "linear-gradient(to right, #e52d27, #b31217)",
                stopOnFocus: true,
                close: true,
                style: {
                  borderRadius: "10px",
                  boxShadow: "0 4px 12px rgba(0, 0, 0, 0.1)",
                  fontSize: "15px",
                  padding: "14px 18px",
                  fontFamily: "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif",
                  color: "#fff"
                }
              }).showToast();
      }
    };

  window.onload = fetchBlogs(1);
</script>
